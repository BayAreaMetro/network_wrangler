<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="70" failures="17" skipped="2" tests="200" time="454.597" timestamp="2024-06-20T10:57:28.420217" hostname="elizabethsmbp2.lan"><testcase classname="tests.test_dependencies" name="test_dependencies_api" time="0.011" /><testcase classname="tests.test_example_files" name="test_example_project_cards_valid" time="9.565" /><testcase classname="tests.test_example_files" name="test_bad_project_cards_fail" time="9.031" /><testcase classname="tests.test_scenario" name="test_project_card_read" time="0.012" /><testcase classname="tests.test_scenario" name="test_project_card_write" time="0.301" /><testcase classname="tests.test_scenario" name="test_scenario_conflicts" time="0.008" /><testcase classname="tests.test_scenario" name="test_scenario_corequisites" time="0.005" /><testcase classname="tests.test_scenario" name="test_scenario_prerequisites" time="0.005" /><testcase classname="tests.test_scenario" name="test_project_sort" time="0.008" /><testcase classname="tests.test_scenario" name="test_apply_summary_wrappers" time="13.859"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.fixture(scope="module")
    def stpaul_transit_net(stpaul_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(stpaul_ex_dir)

tests/conftest.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x14764c7f0&gt;
table_name = 'shapes'
table =       shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence shape_osm_node_id  shape_model_node_id
0      4520004   ... 4890070     44.931310    -93.139579                 37        3071141242               137686

[2069 rows x 6 columns]
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_scenario" name="test_scenario_building_from_script" time="0.399" /><testcase classname="tests.test_setup" name="test_setup" time="119.434" /><testcase classname="tests.test_models.test_db" name="test_validate_db_table" time="0.161" /><testcase classname="tests.test_roadway.test_clip" name="test_clip_roadway_geojson" time="25.676" /><testcase classname="tests.test_roadway.test_clip" name="test_clip_roadway_geocode" time="3.043" /><testcase classname="tests.test_roadway.test_clip" name="test_clip_roadway_gdf" time="0.587" /><testcase classname="tests.test_roadway.test_edit" name="test_add_nodes" time="1.009" /><testcase classname="tests.test_roadway.test_edit" name="test_add_links" time="0.829" /><testcase classname="tests.test_roadway.test_edit" name="test_add_shapes" time="0.268" /><testcase classname="tests.test_roadway.test_edit" name="test_delete_links_by_name" time="0.251" /><testcase classname="tests.test_roadway.test_edit" name="test_delete_links_by_id_with_associated_nodes" time="0.313" /><testcase classname="tests.test_roadway.test_edit" name="test_delete_nodes" time="0.152" /><testcase classname="tests.test_roadway.test_edit" name="test_move_nodes" time="0.685" /><testcase classname="tests.test_roadway.test_io" name="test_convert" time="5.119" /><testcase classname="tests.test_roadway.test_io" name="test_roadway_model_coerce" time="0.477" /><testcase classname="tests.test_roadway.test_io" name="test_roadway_geojson_read_write_read[stpaul-geojson]" time="33.612" /><testcase classname="tests.test_roadway.test_io" name="test_roadway_geojson_read_write_read[stpaul-parquet]" time="24.198" /><testcase classname="tests.test_roadway.test_io" name="test_roadway_geojson_read_write_read[small-geojson]" time="0.981" /><testcase classname="tests.test_roadway.test_io" name="test_roadway_geojson_read_write_read[small-parquet]" time="0.868" /><testcase classname="tests.test_roadway.test_model_roadway" name="test_add_adhoc_managed_lane_field" time="3.751" /><testcase classname="tests.test_roadway.test_model_roadway" name="test_create_ml_network_shape" time="1.994" /><testcase classname="tests.test_roadway.test_model_roadway" name="test_managed_lane_restricted_access_egress" time="30.100" /><testcase classname="tests.test_roadway.test_properties" name="test_network_connectivity" time="15.042" /><testcase classname="tests.test_roadway.test_properties" name="test_network_connectivity_ignore_single_nodes" time="6.516" /><testcase classname="tests.test_roadway.test_scopes" name="test_filter_to_overlapping_timespan_scopes" time="0.002" /><testcase classname="tests.test_roadway.test_scopes" name="test_filter_to_matching_timespan_scopes" time="0.006" /><testcase classname="tests.test_roadway.test_scopes" name="test_filter_to_conflicting_timespan_scopes" time="0.002" /><testcase classname="tests.test_roadway.test_scopes" name="test_filter_to_conflicting_scopes" time="0.015" /><testcase classname="tests.test_roadway.test_scopes" name="test_filter_to_matching_scope" time="0.002" /><testcase classname="tests.test_roadway.test_scopes" name="test_filter_to_overlapping_scopes" time="0.014" /><testcase classname="tests.test_roadway.test_selections" name="test_dfhash" time="15.681" /><testcase classname="tests.test_roadway.test_selections" name="test_select_roadway_features[selection0-answer0]" time="0.244"><failure message="ValueError: Selection dictionary must have either 'links' or 'nodes' key.">request = &lt;FixtureRequest for &lt;Function test_select_roadway_features[selection0-answer0]&gt;&gt;
selection = {'from': {'osm_node_id': '187899923'}, 'links': {'name': ['6th', 'Sixth', 'sixth']}, 'to': {'osm_node_id': '187865924'}}
answer = [134543, 85185, 154004]
stpaul_net = RoadwayNetwork(crs=4326, nodes_df=                   model_node_id osm_node_id                   shstReferenceId  driv...0             0             0  LINESTRING (-93.07710 44.93352, -93.07640 44.93387)        0

[66253 rows x 32 columns])

    @pytest.mark.parametrize("selection,answer", zip(TEST_SELECTIONS, answer_selected_links))
    def test_select_roadway_features(request, selection, answer, stpaul_net):
        WranglerLogger.info(f"--Starting: {request.node.name}")
        net = stpaul_net
        WranglerLogger.info(f"Selecting---&gt;{selection}")
        WranglerLogger.info(f"Num Net Selections: {len(net._selections)}")
        _selection = net.get_selection(selection)
        _show_f = ["A", "B", "name", "osm_link_id", "model_link_id", "lanes"]
&gt;       selected_link_indices = _selection.selected_links

tests/test_roadway/test_selections.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/roadway/selection.py:184: in selected_links
    if self.selected_links_df is None:
network_wrangler/roadway/selection.py:210: in selected_links_df
    self._selected_links_df = self._perform_selection()
network_wrangler/roadway/selection.py:237: in _perform_selection
    _selected_links_df = self.segment.segment_links_df
network_wrangler/roadway/selection.py:198: in segment
    self._segment = Segment(self.net, self)
network_wrangler/roadway/segment.py:140: in __init__
    self.subnet = self._generate_subnet(self.segment_sel_dict)
network_wrangler/roadway/segment.py:282: in _generate_subnet
    if subnet.exists:
network_wrangler/roadway/subnet.py:138: in exists
    if self.subnet_links_df is None:
network_wrangler/roadway/subnet.py:156: in subnet_links_df
    selection = self.net.get_selection(self.selection_dict)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = RoadwayNetwork(crs=4326, nodes_df=                   model_node_id osm_node_id                   shstReferenceId  driv...0             0             0  LINESTRING (-93.07710 44.93352, -93.07640 44.93387)        0

[66253 rows x 32 columns])
selection_dict = {'name': ['6th', 'Sixth', 'sixth']}, overwrite = False

    def get_selection(
        self,
        selection_dict: SelectFacility,
        overwrite: bool = False,
    ) -&gt; Union[RoadwayNodeSelection, RoadwayLinkSelection]:
        """Return selection if it already exists, otherwise performs selection.
    
        Args:
            selection_dict (dict): SelectFacility dictionary.
            overwrite: if True, will overwrite any previously cached searches. Defaults to False.
        """
        key = _create_selection_key(selection_dict)
        if (key in self._selections) and not overwrite:
            WranglerLogger.debug(f"Using cached selection from key: {key}")
            return self._selections[key]
    
        WranglerLogger.debug(f"Getting selection from key: {key}")
        if "links" in selection_dict:
            return RoadwayLinkSelection(self, selection_dict)
        elif "nodes" in selection_dict:
            return RoadwayNodeSelection(self, selection_dict)
        else:
&gt;           raise ValueError("Selection dictionary must have either 'links' or 'nodes' key.")
E           ValueError: Selection dictionary must have either 'links' or 'nodes' key.

network_wrangler/roadway/network.py:283: ValueError</failure></testcase><testcase classname="tests.test_roadway.test_selections" name="test_select_roadway_features[selection1-answer1]" time="0.223"><failure message="ValueError: Selection dictionary must have either 'links' or 'nodes' key.">request = &lt;FixtureRequest for &lt;Function test_select_roadway_features[selection1-answer1]&gt;&gt;
selection = {'from': {'osm_node_id': '2292977517'}, 'links': {'name': ['Lafayette']}, 'to': {'osm_node_id': '507951637'}}
answer = [386035, 401018, 401019]
stpaul_net = RoadwayNetwork(crs=4326, nodes_df=                   model_node_id osm_node_id                   shstReferenceId  driv...0             0             0  LINESTRING (-93.07710 44.93352, -93.07640 44.93387)        0

[66253 rows x 32 columns])

    @pytest.mark.parametrize("selection,answer", zip(TEST_SELECTIONS, answer_selected_links))
    def test_select_roadway_features(request, selection, answer, stpaul_net):
        WranglerLogger.info(f"--Starting: {request.node.name}")
        net = stpaul_net
        WranglerLogger.info(f"Selecting---&gt;{selection}")
        WranglerLogger.info(f"Num Net Selections: {len(net._selections)}")
        _selection = net.get_selection(selection)
        _show_f = ["A", "B", "name", "osm_link_id", "model_link_id", "lanes"]
&gt;       selected_link_indices = _selection.selected_links

tests/test_roadway/test_selections.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/roadway/selection.py:184: in selected_links
    if self.selected_links_df is None:
network_wrangler/roadway/selection.py:210: in selected_links_df
    self._selected_links_df = self._perform_selection()
network_wrangler/roadway/selection.py:237: in _perform_selection
    _selected_links_df = self.segment.segment_links_df
network_wrangler/roadway/selection.py:198: in segment
    self._segment = Segment(self.net, self)
network_wrangler/roadway/segment.py:140: in __init__
    self.subnet = self._generate_subnet(self.segment_sel_dict)
network_wrangler/roadway/segment.py:282: in _generate_subnet
    if subnet.exists:
network_wrangler/roadway/subnet.py:138: in exists
    if self.subnet_links_df is None:
network_wrangler/roadway/subnet.py:156: in subnet_links_df
    selection = self.net.get_selection(self.selection_dict)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = RoadwayNetwork(crs=4326, nodes_df=                   model_node_id osm_node_id                   shstReferenceId  driv...0             0             0  LINESTRING (-93.07710 44.93352, -93.07640 44.93387)        0

[66253 rows x 32 columns])
selection_dict = {'name': ['Lafayette']}, overwrite = False

    def get_selection(
        self,
        selection_dict: SelectFacility,
        overwrite: bool = False,
    ) -&gt; Union[RoadwayNodeSelection, RoadwayLinkSelection]:
        """Return selection if it already exists, otherwise performs selection.
    
        Args:
            selection_dict (dict): SelectFacility dictionary.
            overwrite: if True, will overwrite any previously cached searches. Defaults to False.
        """
        key = _create_selection_key(selection_dict)
        if (key in self._selections) and not overwrite:
            WranglerLogger.debug(f"Using cached selection from key: {key}")
            return self._selections[key]
    
        WranglerLogger.debug(f"Getting selection from key: {key}")
        if "links" in selection_dict:
            return RoadwayLinkSelection(self, selection_dict)
        elif "nodes" in selection_dict:
            return RoadwayNodeSelection(self, selection_dict)
        else:
&gt;           raise ValueError("Selection dictionary must have either 'links' or 'nodes' key.")
E           ValueError: Selection dictionary must have either 'links' or 'nodes' key.

network_wrangler/roadway/network.py:283: ValueError</failure></testcase><testcase classname="tests.test_roadway.test_selections" name="test_select_roadway_features[selection2-answer2]" time="0.231"><failure message="ValueError: Selection dictionary must have either 'links' or 'nodes' key.">request = &lt;FixtureRequest for &lt;Function test_select_roadway_features[selection2-answer2]&gt;&gt;
selection = {'from': {'osm_node_id': '716319401'}, 'links': {'lanes': [1], 'name': ['University Ave']}, 'to': {'model_node_id': '62153'}}
answer = [412924, 389361]
stpaul_net = RoadwayNetwork(crs=4326, nodes_df=                   model_node_id osm_node_id                   shstReferenceId  driv...0             0             0  LINESTRING (-93.07710 44.93352, -93.07640 44.93387)        0

[66253 rows x 32 columns])

    @pytest.mark.parametrize("selection,answer", zip(TEST_SELECTIONS, answer_selected_links))
    def test_select_roadway_features(request, selection, answer, stpaul_net):
        WranglerLogger.info(f"--Starting: {request.node.name}")
        net = stpaul_net
        WranglerLogger.info(f"Selecting---&gt;{selection}")
        WranglerLogger.info(f"Num Net Selections: {len(net._selections)}")
        _selection = net.get_selection(selection)
        _show_f = ["A", "B", "name", "osm_link_id", "model_link_id", "lanes"]
&gt;       selected_link_indices = _selection.selected_links

tests/test_roadway/test_selections.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/roadway/selection.py:184: in selected_links
    if self.selected_links_df is None:
network_wrangler/roadway/selection.py:210: in selected_links_df
    self._selected_links_df = self._perform_selection()
network_wrangler/roadway/selection.py:237: in _perform_selection
    _selected_links_df = self.segment.segment_links_df
network_wrangler/roadway/selection.py:198: in segment
    self._segment = Segment(self.net, self)
network_wrangler/roadway/segment.py:140: in __init__
    self.subnet = self._generate_subnet(self.segment_sel_dict)
network_wrangler/roadway/segment.py:282: in _generate_subnet
    if subnet.exists:
network_wrangler/roadway/subnet.py:138: in exists
    if self.subnet_links_df is None:
network_wrangler/roadway/subnet.py:156: in subnet_links_df
    selection = self.net.get_selection(self.selection_dict)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = RoadwayNetwork(crs=4326, nodes_df=                   model_node_id osm_node_id                   shstReferenceId  driv...0             0             0  LINESTRING (-93.07710 44.93352, -93.07640 44.93387)        0

[66253 rows x 32 columns])
selection_dict = {'name': ['University Ave']}, overwrite = False

    def get_selection(
        self,
        selection_dict: SelectFacility,
        overwrite: bool = False,
    ) -&gt; Union[RoadwayNodeSelection, RoadwayLinkSelection]:
        """Return selection if it already exists, otherwise performs selection.
    
        Args:
            selection_dict (dict): SelectFacility dictionary.
            overwrite: if True, will overwrite any previously cached searches. Defaults to False.
        """
        key = _create_selection_key(selection_dict)
        if (key in self._selections) and not overwrite:
            WranglerLogger.debug(f"Using cached selection from key: {key}")
            return self._selections[key]
    
        WranglerLogger.debug(f"Getting selection from key: {key}")
        if "links" in selection_dict:
            return RoadwayLinkSelection(self, selection_dict)
        elif "nodes" in selection_dict:
            return RoadwayNodeSelection(self, selection_dict)
        else:
&gt;           raise ValueError("Selection dictionary must have either 'links' or 'nodes' key.")
E           ValueError: Selection dictionary must have either 'links' or 'nodes' key.

network_wrangler/roadway/network.py:283: ValueError</failure></testcase><testcase classname="tests.test_roadway.test_selections" name="test_select_roadway_features[selection3-answer3]" time="0.229"><failure message="ValueError: Selection dictionary must have either 'links' or 'nodes' key.">request = &lt;FixtureRequest for &lt;Function test_select_roadway_features[selection3-answer3]&gt;&gt;
selection = {'from': {'osm_node_id': '954746969'}, 'links': {'name': ['I 35E']}, 'to': {'osm_node_id': '3071141242'}}
answer = [381412, 392837, 394194, 394196, 391146]
stpaul_net = RoadwayNetwork(crs=4326, nodes_df=                   model_node_id osm_node_id                   shstReferenceId  driv...0             0             0  LINESTRING (-93.07710 44.93352, -93.07640 44.93387)        0

[66253 rows x 32 columns])

    @pytest.mark.parametrize("selection,answer", zip(TEST_SELECTIONS, answer_selected_links))
    def test_select_roadway_features(request, selection, answer, stpaul_net):
        WranglerLogger.info(f"--Starting: {request.node.name}")
        net = stpaul_net
        WranglerLogger.info(f"Selecting---&gt;{selection}")
        WranglerLogger.info(f"Num Net Selections: {len(net._selections)}")
        _selection = net.get_selection(selection)
        _show_f = ["A", "B", "name", "osm_link_id", "model_link_id", "lanes"]
&gt;       selected_link_indices = _selection.selected_links

tests/test_roadway/test_selections.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/roadway/selection.py:184: in selected_links
    if self.selected_links_df is None:
network_wrangler/roadway/selection.py:210: in selected_links_df
    self._selected_links_df = self._perform_selection()
network_wrangler/roadway/selection.py:237: in _perform_selection
    _selected_links_df = self.segment.segment_links_df
network_wrangler/roadway/selection.py:198: in segment
    self._segment = Segment(self.net, self)
network_wrangler/roadway/segment.py:140: in __init__
    self.subnet = self._generate_subnet(self.segment_sel_dict)
network_wrangler/roadway/segment.py:282: in _generate_subnet
    if subnet.exists:
network_wrangler/roadway/subnet.py:138: in exists
    if self.subnet_links_df is None:
network_wrangler/roadway/subnet.py:156: in subnet_links_df
    selection = self.net.get_selection(self.selection_dict)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = RoadwayNetwork(crs=4326, nodes_df=                   model_node_id osm_node_id                   shstReferenceId  driv...0             0             0  LINESTRING (-93.07710 44.93352, -93.07640 44.93387)        0

[66253 rows x 32 columns])
selection_dict = {'name': ['I 35E']}, overwrite = False

    def get_selection(
        self,
        selection_dict: SelectFacility,
        overwrite: bool = False,
    ) -&gt; Union[RoadwayNodeSelection, RoadwayLinkSelection]:
        """Return selection if it already exists, otherwise performs selection.
    
        Args:
            selection_dict (dict): SelectFacility dictionary.
            overwrite: if True, will overwrite any previously cached searches. Defaults to False.
        """
        key = _create_selection_key(selection_dict)
        if (key in self._selections) and not overwrite:
            WranglerLogger.debug(f"Using cached selection from key: {key}")
            return self._selections[key]
    
        WranglerLogger.debug(f"Getting selection from key: {key}")
        if "links" in selection_dict:
            return RoadwayLinkSelection(self, selection_dict)
        elif "nodes" in selection_dict:
            return RoadwayNodeSelection(self, selection_dict)
        else:
&gt;           raise ValueError("Selection dictionary must have either 'links' or 'nodes' key.")
E           ValueError: Selection dictionary must have either 'links' or 'nodes' key.

network_wrangler/roadway/network.py:283: ValueError</failure></testcase><testcase classname="tests.test_roadway.test_selections" name="test_select_roadway_features[selection4-answer4]" time="0.206"><failure message="ValueError: Selection dictionary must have either 'links' or 'nodes' key.">request = &lt;FixtureRequest for &lt;Function test_select_roadway_features[selection4-answer4]&gt;&gt;
selection = {'from': {'model_node_id': '131209'}, 'links': {'osm_link_id': ['221685893']}, 'to': {'model_node_id': '131221'}}
answer = [294513, 294518, 294532]
stpaul_net = RoadwayNetwork(crs=4326, nodes_df=                   model_node_id osm_node_id                   shstReferenceId  driv...0             0             0  LINESTRING (-93.07710 44.93352, -93.07640 44.93387)        0

[66253 rows x 32 columns])

    @pytest.mark.parametrize("selection,answer", zip(TEST_SELECTIONS, answer_selected_links))
    def test_select_roadway_features(request, selection, answer, stpaul_net):
        WranglerLogger.info(f"--Starting: {request.node.name}")
        net = stpaul_net
        WranglerLogger.info(f"Selecting---&gt;{selection}")
        WranglerLogger.info(f"Num Net Selections: {len(net._selections)}")
        _selection = net.get_selection(selection)
        _show_f = ["A", "B", "name", "osm_link_id", "model_link_id", "lanes"]
&gt;       selected_link_indices = _selection.selected_links

tests/test_roadway/test_selections.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/roadway/selection.py:184: in selected_links
    if self.selected_links_df is None:
network_wrangler/roadway/selection.py:210: in selected_links_df
    self._selected_links_df = self._perform_selection()
network_wrangler/roadway/selection.py:237: in _perform_selection
    _selected_links_df = self.segment.segment_links_df
network_wrangler/roadway/selection.py:198: in segment
    self._segment = Segment(self.net, self)
network_wrangler/roadway/segment.py:140: in __init__
    self.subnet = self._generate_subnet(self.segment_sel_dict)
network_wrangler/roadway/segment.py:282: in _generate_subnet
    if subnet.exists:
network_wrangler/roadway/subnet.py:138: in exists
    if self.subnet_links_df is None:
network_wrangler/roadway/subnet.py:156: in subnet_links_df
    selection = self.net.get_selection(self.selection_dict)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = RoadwayNetwork(crs=4326, nodes_df=                   model_node_id osm_node_id                   shstReferenceId  driv...0             0             0  LINESTRING (-93.07710 44.93352, -93.07640 44.93387)        0

[66253 rows x 32 columns])
selection_dict = {'osm_link_id': ['221685893']}, overwrite = False

    def get_selection(
        self,
        selection_dict: SelectFacility,
        overwrite: bool = False,
    ) -&gt; Union[RoadwayNodeSelection, RoadwayLinkSelection]:
        """Return selection if it already exists, otherwise performs selection.
    
        Args:
            selection_dict (dict): SelectFacility dictionary.
            overwrite: if True, will overwrite any previously cached searches. Defaults to False.
        """
        key = _create_selection_key(selection_dict)
        if (key in self._selections) and not overwrite:
            WranglerLogger.debug(f"Using cached selection from key: {key}")
            return self._selections[key]
    
        WranglerLogger.debug(f"Getting selection from key: {key}")
        if "links" in selection_dict:
            return RoadwayLinkSelection(self, selection_dict)
        elif "nodes" in selection_dict:
            return RoadwayNodeSelection(self, selection_dict)
        else:
&gt;           raise ValueError("Selection dictionary must have either 'links' or 'nodes' key.")
E           ValueError: Selection dictionary must have either 'links' or 'nodes' key.

network_wrangler/roadway/network.py:283: ValueError</failure></testcase><testcase classname="tests.test_roadway.test_selections" name="test_select_roadway_features[selection5-answer5]" time="1.036" /><testcase classname="tests.test_roadway.test_selections" name="test_select_roadway_features[selection6-None]" time="0.698" /><testcase classname="tests.test_roadway.test_selections" name="test_select_roadway_features[selection7-None]" time="0.656" /><testcase classname="tests.test_roadway.test_selections" name="test_select_roadway_features[selection8-answer8]" time="0.245"><failure message="ValueError: Selection dictionary must have either 'links' or 'nodes' key.">request = &lt;FixtureRequest for &lt;Function test_select_roadway_features[selection8-answer8]&gt;&gt;
selection = {'from': {'model_node_id': 174762}, 'links': {'modes': ['walk'], 'name': ['Valley Street']}, 'to': {'model_node_id': 43041}}
answer = [460228, 481940]
stpaul_net = RoadwayNetwork(crs=4326, nodes_df=                   model_node_id osm_node_id                   shstReferenceId  driv...0             0             0  LINESTRING (-93.07710 44.93352, -93.07640 44.93387)        0

[66253 rows x 32 columns])

    @pytest.mark.parametrize("selection,answer", zip(TEST_SELECTIONS, answer_selected_links))
    def test_select_roadway_features(request, selection, answer, stpaul_net):
        WranglerLogger.info(f"--Starting: {request.node.name}")
        net = stpaul_net
        WranglerLogger.info(f"Selecting---&gt;{selection}")
        WranglerLogger.info(f"Num Net Selections: {len(net._selections)}")
        _selection = net.get_selection(selection)
        _show_f = ["A", "B", "name", "osm_link_id", "model_link_id", "lanes"]
&gt;       selected_link_indices = _selection.selected_links

tests/test_roadway/test_selections.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/roadway/selection.py:184: in selected_links
    if self.selected_links_df is None:
network_wrangler/roadway/selection.py:210: in selected_links_df
    self._selected_links_df = self._perform_selection()
network_wrangler/roadway/selection.py:237: in _perform_selection
    _selected_links_df = self.segment.segment_links_df
network_wrangler/roadway/selection.py:198: in segment
    self._segment = Segment(self.net, self)
network_wrangler/roadway/segment.py:140: in __init__
    self.subnet = self._generate_subnet(self.segment_sel_dict)
network_wrangler/roadway/segment.py:282: in _generate_subnet
    if subnet.exists:
network_wrangler/roadway/subnet.py:138: in exists
    if self.subnet_links_df is None:
network_wrangler/roadway/subnet.py:156: in subnet_links_df
    selection = self.net.get_selection(self.selection_dict)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = RoadwayNetwork(crs=4326, nodes_df=                   model_node_id osm_node_id                   shstReferenceId  driv...0             0             0  LINESTRING (-93.07710 44.93352, -93.07640 44.93387)        0

[66253 rows x 32 columns])
selection_dict = {'name': ['Valley Street']}, overwrite = False

    def get_selection(
        self,
        selection_dict: SelectFacility,
        overwrite: bool = False,
    ) -&gt; Union[RoadwayNodeSelection, RoadwayLinkSelection]:
        """Return selection if it already exists, otherwise performs selection.
    
        Args:
            selection_dict (dict): SelectFacility dictionary.
            overwrite: if True, will overwrite any previously cached searches. Defaults to False.
        """
        key = _create_selection_key(selection_dict)
        if (key in self._selections) and not overwrite:
            WranglerLogger.debug(f"Using cached selection from key: {key}")
            return self._selections[key]
    
        WranglerLogger.debug(f"Getting selection from key: {key}")
        if "links" in selection_dict:
            return RoadwayLinkSelection(self, selection_dict)
        elif "nodes" in selection_dict:
            return RoadwayNodeSelection(self, selection_dict)
        else:
&gt;           raise ValueError("Selection dictionary must have either 'links' or 'nodes' key.")
E           ValueError: Selection dictionary must have either 'links' or 'nodes' key.

network_wrangler/roadway/network.py:283: ValueError</failure></testcase><testcase classname="tests.test_roadway.test_selections" name="test_select_roadway_features_from_projectcard" time="0.227"><failure message="ValueError: Selection dictionary must have either 'links' or 'nodes' key.">request = &lt;FixtureRequest for &lt;Function test_select_roadway_features_from_projectcard&gt;&gt;
stpaul_net = RoadwayNetwork(crs=4326, nodes_df=                   model_node_id osm_node_id                   shstReferenceId  driv...0             0             0  LINESTRING (-93.07710 44.93352, -93.07640 44.93387)        0

[66253 rows x 32 columns])
stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    def test_select_roadway_features_from_projectcard(request, stpaul_net, stpaul_ex_dir):
        WranglerLogger.info(f"--Starting: {request.node.name}")
        net = stpaul_net
    
        # selection is a facility segment
        project_card_name = "road.prop_change.multiple.yml"
        _expected_answer = [134543, 85185, 154004]
    
        project_card_path = os.path.join(stpaul_ex_dir, "project_cards", project_card_name)
        project_card = read_card(project_card_path)
    
        _facility = project_card.roadway_property_change["facility"]
        _selection = net.get_selection(_facility)
&gt;       selected_link_idx = _selection.selected_links

tests/test_roadway/test_selections.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/roadway/selection.py:184: in selected_links
    if self.selected_links_df is None:
network_wrangler/roadway/selection.py:210: in selected_links_df
    self._selected_links_df = self._perform_selection()
network_wrangler/roadway/selection.py:237: in _perform_selection
    _selected_links_df = self.segment.segment_links_df
network_wrangler/roadway/selection.py:198: in segment
    self._segment = Segment(self.net, self)
network_wrangler/roadway/segment.py:140: in __init__
    self.subnet = self._generate_subnet(self.segment_sel_dict)
network_wrangler/roadway/segment.py:282: in _generate_subnet
    if subnet.exists:
network_wrangler/roadway/subnet.py:138: in exists
    if self.subnet_links_df is None:
network_wrangler/roadway/subnet.py:156: in subnet_links_df
    selection = self.net.get_selection(self.selection_dict)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = RoadwayNetwork(crs=4326, nodes_df=                   model_node_id osm_node_id                   shstReferenceId  driv...0             0             0  LINESTRING (-93.07710 44.93352, -93.07640 44.93387)        0

[66253 rows x 32 columns])
selection_dict = {'name': ['6th', 'Sixth', 'sixth']}, overwrite = False

    def get_selection(
        self,
        selection_dict: SelectFacility,
        overwrite: bool = False,
    ) -&gt; Union[RoadwayNodeSelection, RoadwayLinkSelection]:
        """Return selection if it already exists, otherwise performs selection.
    
        Args:
            selection_dict (dict): SelectFacility dictionary.
            overwrite: if True, will overwrite any previously cached searches. Defaults to False.
        """
        key = _create_selection_key(selection_dict)
        if (key in self._selections) and not overwrite:
            WranglerLogger.debug(f"Using cached selection from key: {key}")
            return self._selections[key]
    
        WranglerLogger.debug(f"Getting selection from key: {key}")
        if "links" in selection_dict:
            return RoadwayLinkSelection(self, selection_dict)
        elif "nodes" in selection_dict:
            return RoadwayNodeSelection(self, selection_dict)
        else:
&gt;           raise ValueError("Selection dictionary must have either 'links' or 'nodes' key.")
E           ValueError: Selection dictionary must have either 'links' or 'nodes' key.

network_wrangler/roadway/network.py:283: ValueError</failure></testcase><testcase classname="tests.test_roadway.test_selections" name="test_query_roadway_property_by_time_group[variable_query0]" time="0.658"><failure message="ValueError: Selection dictionary must have either 'links' or 'nodes' key.">request = &lt;FixtureRequest for &lt;Function test_query_roadway_property_by_time_group[variable_query0]&gt;&gt;
variable_query = ({'category': 'sov', 'timespan': ['12:00', '12:30'], 'v': 'lanes'}, 3)
stpaul_net = RoadwayNetwork(crs=4326, nodes_df=                   model_node_id osm_node_id                   shstReferenceId  driv...0             0             0  LINESTRING (-93.07710 44.93352, -93.07640 44.93387)        0

[66253 rows x 32 columns])
stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.mark.parametrize("variable_query", variable_queries)
    def test_query_roadway_property_by_time_group(request, variable_query, stpaul_net, stpaul_ex_dir):
        WranglerLogger.info(f"--Starting: {request.node.name}")
        net = copy.deepcopy(stpaul_net)
    
        _query, _answer = variable_query
    
        project_card_path = os.path.join(
            stpaul_ex_dir, "project_cards", "road.managed_lanes.whole_facility.yml"
        )
        project_card = read_card(project_card_path)
&gt;       net = net.apply(project_card)

tests/test_roadway/test_selections.py:186: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/roadway/network.py:322: in apply
    return self._apply_change(project_card)
network_wrangler/roadway/network.py:330: in _apply_change
    return apply_roadway_property_change(
network_wrangler/roadway/projects/edit_property.py:85: in apply_roadway_property_change
    roadway_net.links_df, selection.selected_links, property_changes
network_wrangler/roadway/selection.py:184: in selected_links
    if self.selected_links_df is None:
network_wrangler/roadway/selection.py:210: in selected_links_df
    self._selected_links_df = self._perform_selection()
network_wrangler/roadway/selection.py:237: in _perform_selection
    _selected_links_df = self.segment.segment_links_df
network_wrangler/roadway/selection.py:198: in segment
    self._segment = Segment(self.net, self)
network_wrangler/roadway/segment.py:140: in __init__
    self.subnet = self._generate_subnet(self.segment_sel_dict)
network_wrangler/roadway/segment.py:282: in _generate_subnet
    if subnet.exists:
network_wrangler/roadway/subnet.py:138: in exists
    if self.subnet_links_df is None:
network_wrangler/roadway/subnet.py:156: in subnet_links_df
    selection = self.net.get_selection(self.selection_dict)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = RoadwayNetwork(crs=4326, nodes_df=                   model_node_id osm_node_id                   shstReferenceId  driv...0             0             0  LINESTRING (-93.07710 44.93352, -93.07640 44.93387)        0

[66253 rows x 32 columns])
selection_dict = {'name': ['I 35E']}, overwrite = False

    def get_selection(
        self,
        selection_dict: SelectFacility,
        overwrite: bool = False,
    ) -&gt; Union[RoadwayNodeSelection, RoadwayLinkSelection]:
        """Return selection if it already exists, otherwise performs selection.
    
        Args:
            selection_dict (dict): SelectFacility dictionary.
            overwrite: if True, will overwrite any previously cached searches. Defaults to False.
        """
        key = _create_selection_key(selection_dict)
        if (key in self._selections) and not overwrite:
            WranglerLogger.debug(f"Using cached selection from key: {key}")
            return self._selections[key]
    
        WranglerLogger.debug(f"Getting selection from key: {key}")
        if "links" in selection_dict:
            return RoadwayLinkSelection(self, selection_dict)
        elif "nodes" in selection_dict:
            return RoadwayNodeSelection(self, selection_dict)
        else:
&gt;           raise ValueError("Selection dictionary must have either 'links' or 'nodes' key.")
E           ValueError: Selection dictionary must have either 'links' or 'nodes' key.

network_wrangler/roadway/network.py:283: ValueError</failure></testcase><testcase classname="tests.test_roadway.test_selections" name="test_query_roadway_property_by_time_group[variable_query1]" time="0.663"><failure message="ValueError: Selection dictionary must have either 'links' or 'nodes' key.">request = &lt;FixtureRequest for &lt;Function test_query_roadway_property_by_time_group[variable_query1]&gt;&gt;
variable_query = ({'timespan': ['12:00', '12:30'], 'v': 'lanes'}, 3)
stpaul_net = RoadwayNetwork(crs=4326, nodes_df=                   model_node_id osm_node_id                   shstReferenceId  driv...0             0             0  LINESTRING (-93.07710 44.93352, -93.07640 44.93387)        0

[66253 rows x 32 columns])
stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.mark.parametrize("variable_query", variable_queries)
    def test_query_roadway_property_by_time_group(request, variable_query, stpaul_net, stpaul_ex_dir):
        WranglerLogger.info(f"--Starting: {request.node.name}")
        net = copy.deepcopy(stpaul_net)
    
        _query, _answer = variable_query
    
        project_card_path = os.path.join(
            stpaul_ex_dir, "project_cards", "road.managed_lanes.whole_facility.yml"
        )
        project_card = read_card(project_card_path)
&gt;       net = net.apply(project_card)

tests/test_roadway/test_selections.py:186: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/roadway/network.py:322: in apply
    return self._apply_change(project_card)
network_wrangler/roadway/network.py:330: in _apply_change
    return apply_roadway_property_change(
network_wrangler/roadway/projects/edit_property.py:85: in apply_roadway_property_change
    roadway_net.links_df, selection.selected_links, property_changes
network_wrangler/roadway/selection.py:184: in selected_links
    if self.selected_links_df is None:
network_wrangler/roadway/selection.py:210: in selected_links_df
    self._selected_links_df = self._perform_selection()
network_wrangler/roadway/selection.py:237: in _perform_selection
    _selected_links_df = self.segment.segment_links_df
network_wrangler/roadway/selection.py:198: in segment
    self._segment = Segment(self.net, self)
network_wrangler/roadway/segment.py:140: in __init__
    self.subnet = self._generate_subnet(self.segment_sel_dict)
network_wrangler/roadway/segment.py:282: in _generate_subnet
    if subnet.exists:
network_wrangler/roadway/subnet.py:138: in exists
    if self.subnet_links_df is None:
network_wrangler/roadway/subnet.py:156: in subnet_links_df
    selection = self.net.get_selection(self.selection_dict)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = RoadwayNetwork(crs=4326, nodes_df=                   model_node_id osm_node_id                   shstReferenceId  driv...0             0             0  LINESTRING (-93.07710 44.93352, -93.07640 44.93387)        0

[66253 rows x 32 columns])
selection_dict = {'name': ['I 35E']}, overwrite = False

    def get_selection(
        self,
        selection_dict: SelectFacility,
        overwrite: bool = False,
    ) -&gt; Union[RoadwayNodeSelection, RoadwayLinkSelection]:
        """Return selection if it already exists, otherwise performs selection.
    
        Args:
            selection_dict (dict): SelectFacility dictionary.
            overwrite: if True, will overwrite any previously cached searches. Defaults to False.
        """
        key = _create_selection_key(selection_dict)
        if (key in self._selections) and not overwrite:
            WranglerLogger.debug(f"Using cached selection from key: {key}")
            return self._selections[key]
    
        WranglerLogger.debug(f"Getting selection from key: {key}")
        if "links" in selection_dict:
            return RoadwayLinkSelection(self, selection_dict)
        elif "nodes" in selection_dict:
            return RoadwayNodeSelection(self, selection_dict)
        else:
&gt;           raise ValueError("Selection dictionary must have either 'links' or 'nodes' key.")
E           ValueError: Selection dictionary must have either 'links' or 'nodes' key.

network_wrangler/roadway/network.py:283: ValueError</failure></testcase><testcase classname="tests.test_roadway.test_selections" name="test_query_roadway_property_by_time_group[variable_query2]" time="0.629"><failure message="ValueError: Selection dictionary must have either 'links' or 'nodes' key.">request = &lt;FixtureRequest for &lt;Function test_query_roadway_property_by_time_group[variable_query2]&gt;&gt;
variable_query = ({'timespan': ['7:00', '9:00'], 'v': 'lanes'}, 2)
stpaul_net = RoadwayNetwork(crs=4326, nodes_df=                   model_node_id osm_node_id                   shstReferenceId  driv...0             0             0  LINESTRING (-93.07710 44.93352, -93.07640 44.93387)        0

[66253 rows x 32 columns])
stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.mark.parametrize("variable_query", variable_queries)
    def test_query_roadway_property_by_time_group(request, variable_query, stpaul_net, stpaul_ex_dir):
        WranglerLogger.info(f"--Starting: {request.node.name}")
        net = copy.deepcopy(stpaul_net)
    
        _query, _answer = variable_query
    
        project_card_path = os.path.join(
            stpaul_ex_dir, "project_cards", "road.managed_lanes.whole_facility.yml"
        )
        project_card = read_card(project_card_path)
&gt;       net = net.apply(project_card)

tests/test_roadway/test_selections.py:186: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/roadway/network.py:322: in apply
    return self._apply_change(project_card)
network_wrangler/roadway/network.py:330: in _apply_change
    return apply_roadway_property_change(
network_wrangler/roadway/projects/edit_property.py:85: in apply_roadway_property_change
    roadway_net.links_df, selection.selected_links, property_changes
network_wrangler/roadway/selection.py:184: in selected_links
    if self.selected_links_df is None:
network_wrangler/roadway/selection.py:210: in selected_links_df
    self._selected_links_df = self._perform_selection()
network_wrangler/roadway/selection.py:237: in _perform_selection
    _selected_links_df = self.segment.segment_links_df
network_wrangler/roadway/selection.py:198: in segment
    self._segment = Segment(self.net, self)
network_wrangler/roadway/segment.py:140: in __init__
    self.subnet = self._generate_subnet(self.segment_sel_dict)
network_wrangler/roadway/segment.py:282: in _generate_subnet
    if subnet.exists:
network_wrangler/roadway/subnet.py:138: in exists
    if self.subnet_links_df is None:
network_wrangler/roadway/subnet.py:156: in subnet_links_df
    selection = self.net.get_selection(self.selection_dict)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = RoadwayNetwork(crs=4326, nodes_df=                   model_node_id osm_node_id                   shstReferenceId  driv...0             0             0  LINESTRING (-93.07710 44.93352, -93.07640 44.93387)        0

[66253 rows x 32 columns])
selection_dict = {'name': ['I 35E']}, overwrite = False

    def get_selection(
        self,
        selection_dict: SelectFacility,
        overwrite: bool = False,
    ) -&gt; Union[RoadwayNodeSelection, RoadwayLinkSelection]:
        """Return selection if it already exists, otherwise performs selection.
    
        Args:
            selection_dict (dict): SelectFacility dictionary.
            overwrite: if True, will overwrite any previously cached searches. Defaults to False.
        """
        key = _create_selection_key(selection_dict)
        if (key in self._selections) and not overwrite:
            WranglerLogger.debug(f"Using cached selection from key: {key}")
            return self._selections[key]
    
        WranglerLogger.debug(f"Getting selection from key: {key}")
        if "links" in selection_dict:
            return RoadwayLinkSelection(self, selection_dict)
        elif "nodes" in selection_dict:
            return RoadwayNodeSelection(self, selection_dict)
        else:
&gt;           raise ValueError("Selection dictionary must have either 'links' or 'nodes' key.")
E           ValueError: Selection dictionary must have either 'links' or 'nodes' key.

network_wrangler/roadway/network.py:283: ValueError</failure></testcase><testcase classname="tests.test_roadway.test_selections" name="test_query_roadway_property_by_time_group[variable_query3]" time="0.640"><failure message="ValueError: Selection dictionary must have either 'links' or 'nodes' key.">request = &lt;FixtureRequest for &lt;Function test_query_roadway_property_by_time_group[variable_query3]&gt;&gt;
variable_query = ({'category': 'sov', 'timespan': ['7:00', '9:00'], 'v': 'ML_price'}, 1.5)
stpaul_net = RoadwayNetwork(crs=4326, nodes_df=                   model_node_id osm_node_id                   shstReferenceId  driv...0             0             0  LINESTRING (-93.07710 44.93352, -93.07640 44.93387)        0

[66253 rows x 32 columns])
stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.mark.parametrize("variable_query", variable_queries)
    def test_query_roadway_property_by_time_group(request, variable_query, stpaul_net, stpaul_ex_dir):
        WranglerLogger.info(f"--Starting: {request.node.name}")
        net = copy.deepcopy(stpaul_net)
    
        _query, _answer = variable_query
    
        project_card_path = os.path.join(
            stpaul_ex_dir, "project_cards", "road.managed_lanes.whole_facility.yml"
        )
        project_card = read_card(project_card_path)
&gt;       net = net.apply(project_card)

tests/test_roadway/test_selections.py:186: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/roadway/network.py:322: in apply
    return self._apply_change(project_card)
network_wrangler/roadway/network.py:330: in _apply_change
    return apply_roadway_property_change(
network_wrangler/roadway/projects/edit_property.py:85: in apply_roadway_property_change
    roadway_net.links_df, selection.selected_links, property_changes
network_wrangler/roadway/selection.py:184: in selected_links
    if self.selected_links_df is None:
network_wrangler/roadway/selection.py:210: in selected_links_df
    self._selected_links_df = self._perform_selection()
network_wrangler/roadway/selection.py:237: in _perform_selection
    _selected_links_df = self.segment.segment_links_df
network_wrangler/roadway/selection.py:198: in segment
    self._segment = Segment(self.net, self)
network_wrangler/roadway/segment.py:140: in __init__
    self.subnet = self._generate_subnet(self.segment_sel_dict)
network_wrangler/roadway/segment.py:282: in _generate_subnet
    if subnet.exists:
network_wrangler/roadway/subnet.py:138: in exists
    if self.subnet_links_df is None:
network_wrangler/roadway/subnet.py:156: in subnet_links_df
    selection = self.net.get_selection(self.selection_dict)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = RoadwayNetwork(crs=4326, nodes_df=                   model_node_id osm_node_id                   shstReferenceId  driv...0             0             0  LINESTRING (-93.07710 44.93352, -93.07640 44.93387)        0

[66253 rows x 32 columns])
selection_dict = {'name': ['I 35E']}, overwrite = False

    def get_selection(
        self,
        selection_dict: SelectFacility,
        overwrite: bool = False,
    ) -&gt; Union[RoadwayNodeSelection, RoadwayLinkSelection]:
        """Return selection if it already exists, otherwise performs selection.
    
        Args:
            selection_dict (dict): SelectFacility dictionary.
            overwrite: if True, will overwrite any previously cached searches. Defaults to False.
        """
        key = _create_selection_key(selection_dict)
        if (key in self._selections) and not overwrite:
            WranglerLogger.debug(f"Using cached selection from key: {key}")
            return self._selections[key]
    
        WranglerLogger.debug(f"Getting selection from key: {key}")
        if "links" in selection_dict:
            return RoadwayLinkSelection(self, selection_dict)
        elif "nodes" in selection_dict:
            return RoadwayNodeSelection(self, selection_dict)
        else:
&gt;           raise ValueError("Selection dictionary must have either 'links' or 'nodes' key.")
E           ValueError: Selection dictionary must have either 'links' or 'nodes' key.

network_wrangler/roadway/network.py:283: ValueError</failure></testcase><testcase classname="tests.test_roadway.test_selections" name="test_query_roadway_property_by_time_group[variable_query4]" time="0.635"><failure message="ValueError: Selection dictionary must have either 'links' or 'nodes' key.">request = &lt;FixtureRequest for &lt;Function test_query_roadway_property_by_time_group[variable_query4]&gt;&gt;
variable_query = ({'categories': ['hov3', 'hov2'], 'timespan': ['7:00', '9:00'], 'v': 'ML_price'}, 1)
stpaul_net = RoadwayNetwork(crs=4326, nodes_df=                   model_node_id osm_node_id                   shstReferenceId  driv...0             0             0  LINESTRING (-93.07710 44.93352, -93.07640 44.93387)        0

[66253 rows x 32 columns])
stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.mark.parametrize("variable_query", variable_queries)
    def test_query_roadway_property_by_time_group(request, variable_query, stpaul_net, stpaul_ex_dir):
        WranglerLogger.info(f"--Starting: {request.node.name}")
        net = copy.deepcopy(stpaul_net)
    
        _query, _answer = variable_query
    
        project_card_path = os.path.join(
            stpaul_ex_dir, "project_cards", "road.managed_lanes.whole_facility.yml"
        )
        project_card = read_card(project_card_path)
&gt;       net = net.apply(project_card)

tests/test_roadway/test_selections.py:186: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/roadway/network.py:322: in apply
    return self._apply_change(project_card)
network_wrangler/roadway/network.py:330: in _apply_change
    return apply_roadway_property_change(
network_wrangler/roadway/projects/edit_property.py:85: in apply_roadway_property_change
    roadway_net.links_df, selection.selected_links, property_changes
network_wrangler/roadway/selection.py:184: in selected_links
    if self.selected_links_df is None:
network_wrangler/roadway/selection.py:210: in selected_links_df
    self._selected_links_df = self._perform_selection()
network_wrangler/roadway/selection.py:237: in _perform_selection
    _selected_links_df = self.segment.segment_links_df
network_wrangler/roadway/selection.py:198: in segment
    self._segment = Segment(self.net, self)
network_wrangler/roadway/segment.py:140: in __init__
    self.subnet = self._generate_subnet(self.segment_sel_dict)
network_wrangler/roadway/segment.py:282: in _generate_subnet
    if subnet.exists:
network_wrangler/roadway/subnet.py:138: in exists
    if self.subnet_links_df is None:
network_wrangler/roadway/subnet.py:156: in subnet_links_df
    selection = self.net.get_selection(self.selection_dict)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = RoadwayNetwork(crs=4326, nodes_df=                   model_node_id osm_node_id                   shstReferenceId  driv...0             0             0  LINESTRING (-93.07710 44.93352, -93.07640 44.93387)        0

[66253 rows x 32 columns])
selection_dict = {'name': ['I 35E']}, overwrite = False

    def get_selection(
        self,
        selection_dict: SelectFacility,
        overwrite: bool = False,
    ) -&gt; Union[RoadwayNodeSelection, RoadwayLinkSelection]:
        """Return selection if it already exists, otherwise performs selection.
    
        Args:
            selection_dict (dict): SelectFacility dictionary.
            overwrite: if True, will overwrite any previously cached searches. Defaults to False.
        """
        key = _create_selection_key(selection_dict)
        if (key in self._selections) and not overwrite:
            WranglerLogger.debug(f"Using cached selection from key: {key}")
            return self._selections[key]
    
        WranglerLogger.debug(f"Getting selection from key: {key}")
        if "links" in selection_dict:
            return RoadwayLinkSelection(self, selection_dict)
        elif "nodes" in selection_dict:
            return RoadwayNodeSelection(self, selection_dict)
        else:
&gt;           raise ValueError("Selection dictionary must have either 'links' or 'nodes' key.")
E           ValueError: Selection dictionary must have either 'links' or 'nodes' key.

network_wrangler/roadway/network.py:283: ValueError</failure></testcase><testcase classname="tests.test_roadway.test_selections" name="test_get_modal_network" time="0.032" /><testcase classname="tests.test_roadway.test_selections" name="test_identify_segment_ends" time="0.002"><skipped type="pytest.xfail" message="" /></testcase><testcase classname="tests.test_roadway.test_selections" name="test_query_builder[test_spec0]" time="0.012" /><testcase classname="tests.test_roadway.test_selections" name="test_query_builder[test_spec1]" time="0.004" /><testcase classname="tests.test_roadway.test_selections" name="test_query_builder[test_spec2]" time="0.004" /><testcase classname="tests.test_roadway.test_changes.test_managed_lanes" name="test_add_managed_lane" time="13.041"><failure message="ValueError: Selection dictionary must have either 'links' or 'nodes' key.">request = &lt;FixtureRequest for &lt;Function test_add_managed_lane&gt;&gt;
stpaul_net = RoadwayNetwork(crs=4326, nodes_df=                   model_node_id osm_node_id                   shstReferenceId  driv...0             0             0  LINESTRING (-93.07710 44.93352, -93.07640 44.93387)        0

[66253 rows x 32 columns])
stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')
scratch_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/scratch')

    def test_add_managed_lane(request, stpaul_net, stpaul_ex_dir, scratch_dir):
        WranglerLogger.info(f"--Starting: {request.node.name}")
    
        # Set facility selection
        _facility = {
            "links": {"name": ["I 35E"]},
            "from": {"osm_node_id": "961117623"},
            "to": {"osm_node_id": "2564047368"},
        }
    
        _properties = SIMPLE_MANAGED_LANE_PROPERTIES
        _project_card_dict = {
            "project": "test simple managed lanes",
            "roadway_property_change": {
                "facility": _facility,
                "property_changes": _properties,
            },
        }
        _am_period = ["6:00", "9:00"]
        _pm_period = ["16:00", "19:00"]
        _expected_property_values = {
            "managed": 1,
            "lanes": 3,
            "sc_lanes": [
                ScopedLinkValueItem(timespan=_am_period, value=2),
                ScopedLinkValueItem(timespan=_pm_period, value=2),
            ],
            "ML_lanes": 0,
            "sc_ML_lanes": [
                ScopedLinkValueItem(timespan=_am_period, value=1),
                ScopedLinkValueItem(timespan=_pm_period, value=1),
            ],
            "ML_access_point": True,
            "ML_egress_point": True,
            "ML_price": 0,
            "sc_ML_price": [
                ScopedLinkValueItem(category="sov", timespan=_am_period, value=1.5),
                ScopedLinkValueItem(category="sov", timespan=_pm_period, value=2.5),
                ScopedLinkValueItem(category="hov2", timespan=_am_period, value=1),
                ScopedLinkValueItem(category="hov2", timespan=_pm_period, value=2),
            ],
        }
    
        net = copy.deepcopy(stpaul_net)
    
&gt;       _selected_link_idx = net.get_selection(_facility).selected_links

tests/test_roadway/test_changes/test_managed_lanes.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/roadway/selection.py:184: in selected_links
    if self.selected_links_df is None:
network_wrangler/roadway/selection.py:210: in selected_links_df
    self._selected_links_df = self._perform_selection()
network_wrangler/roadway/selection.py:237: in _perform_selection
    _selected_links_df = self.segment.segment_links_df
network_wrangler/roadway/selection.py:198: in segment
    self._segment = Segment(self.net, self)
network_wrangler/roadway/segment.py:140: in __init__
    self.subnet = self._generate_subnet(self.segment_sel_dict)
network_wrangler/roadway/segment.py:282: in _generate_subnet
    if subnet.exists:
network_wrangler/roadway/subnet.py:138: in exists
    if self.subnet_links_df is None:
network_wrangler/roadway/subnet.py:156: in subnet_links_df
    selection = self.net.get_selection(self.selection_dict)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = RoadwayNetwork(crs=4326, nodes_df=                   model_node_id osm_node_id                   shstReferenceId  driv...0             0             0  LINESTRING (-93.07710 44.93352, -93.07640 44.93387)        0

[66253 rows x 32 columns])
selection_dict = {'name': ['I 35E']}, overwrite = False

    def get_selection(
        self,
        selection_dict: SelectFacility,
        overwrite: bool = False,
    ) -&gt; Union[RoadwayNodeSelection, RoadwayLinkSelection]:
        """Return selection if it already exists, otherwise performs selection.
    
        Args:
            selection_dict (dict): SelectFacility dictionary.
            overwrite: if True, will overwrite any previously cached searches. Defaults to False.
        """
        key = _create_selection_key(selection_dict)
        if (key in self._selections) and not overwrite:
            WranglerLogger.debug(f"Using cached selection from key: {key}")
            return self._selections[key]
    
        WranglerLogger.debug(f"Getting selection from key: {key}")
        if "links" in selection_dict:
            return RoadwayLinkSelection(self, selection_dict)
        elif "nodes" in selection_dict:
            return RoadwayNodeSelection(self, selection_dict)
        else:
&gt;           raise ValueError("Selection dictionary must have either 'links' or 'nodes' key.")
E           ValueError: Selection dictionary must have either 'links' or 'nodes' key.

network_wrangler/roadway/network.py:283: ValueError</failure></testcase><testcase classname="tests.test_roadway.test_changes.test_managed_lanes" name="test_managed_lane_change_functionality" time="13.633" /><testcase classname="tests.test_roadway.test_changes.test_managed_lanes" name="test_existing_managed_lane_apply" time="22.312" /><testcase classname="tests.test_roadway.test_changes.test_pycode" name="test_read_dot_wrangler_roadway" time="0.005" /><testcase classname="tests.test_roadway.test_changes.test_pycode" name="test_apply_pycode_roadway" time="1.343" /><testcase classname="tests.test_roadway.test_changes.test_pycode" name="test_apply_bad_pycode_roadway" time="0.474" /><testcase classname="tests.test_roadway.test_changes.test_roadway_add_delete" name="test_add_roadway_link_project_card" time="1.118" /><testcase classname="tests.test_roadway.test_changes.test_roadway_add_delete" name="test_add_roadway_project_card" time="14.800" /><testcase classname="tests.test_roadway.test_changes.test_roadway_add_delete" name="test_add_delete_roadway_project_card" time="3.736" /><testcase classname="tests.test_roadway.test_changes.test_roadway_add_delete" name="test_delete_roadway_shape" time="2.181" /><testcase classname="tests.test_roadway.test_changes.test_roadway_add_delete" name="test_add_nodes" time="0.853" /><testcase classname="tests.test_roadway.test_changes.test_roadway_feature_change" name="test_change_roadway_existing_and_change_single_link" time="13.229"><failure message="ValueError: Selection dictionary must have either 'links' or 'nodes' key.">request = &lt;FixtureRequest for &lt;Function test_change_roadway_existing_and_change_single_link&gt;&gt;
stpaul_net = RoadwayNetwork(crs=4326, nodes_df=                   model_node_id osm_node_id                   shstReferenceId  driv...0             0             0  LINESTRING (-93.07710 44.93352, -93.07640 44.93387)        0

[66253 rows x 32 columns])

    def test_change_roadway_existing_and_change_single_link(request, stpaul_net):
        WranglerLogger.info(f"--Starting: {request.node.name}")
        net = copy.deepcopy(stpaul_net)
    
        # Set facility selection
        _facility = {
            "links": {"osm_link_id": ["223371529"]},
            "from": {"osm_node_id": "187854529"},  # Jackson St
            "to": {"osm_node_id": "187899923"},  # Robert St N
        }
        _properties = {
            "lanes": {  # changes number of lanes 3 to 2 (reduction of 1)
                "existing": 2,
                "change": -1,
            }
        }
        _project_card_dict = {
            "project": "test",
            "roadway_property_change": {
                "facility": _facility,
                "property_changes": _properties,
            },
        }
    
&gt;       _selected_link_idx = net.get_selection(_facility).selected_links

tests/test_roadway/test_changes/test_roadway_feature_change.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/roadway/selection.py:184: in selected_links
    if self.selected_links_df is None:
network_wrangler/roadway/selection.py:210: in selected_links_df
    self._selected_links_df = self._perform_selection()
network_wrangler/roadway/selection.py:237: in _perform_selection
    _selected_links_df = self.segment.segment_links_df
network_wrangler/roadway/selection.py:198: in segment
    self._segment = Segment(self.net, self)
network_wrangler/roadway/segment.py:140: in __init__
    self.subnet = self._generate_subnet(self.segment_sel_dict)
network_wrangler/roadway/segment.py:282: in _generate_subnet
    if subnet.exists:
network_wrangler/roadway/subnet.py:138: in exists
    if self.subnet_links_df is None:
network_wrangler/roadway/subnet.py:156: in subnet_links_df
    selection = self.net.get_selection(self.selection_dict)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = RoadwayNetwork(crs=4326, nodes_df=                   model_node_id osm_node_id                   shstReferenceId  driv...0             0             0  LINESTRING (-93.07710 44.93352, -93.07640 44.93387)        0

[66253 rows x 32 columns])
selection_dict = {'osm_link_id': ['223371529']}, overwrite = False

    def get_selection(
        self,
        selection_dict: SelectFacility,
        overwrite: bool = False,
    ) -&gt; Union[RoadwayNodeSelection, RoadwayLinkSelection]:
        """Return selection if it already exists, otherwise performs selection.
    
        Args:
            selection_dict (dict): SelectFacility dictionary.
            overwrite: if True, will overwrite any previously cached searches. Defaults to False.
        """
        key = _create_selection_key(selection_dict)
        if (key in self._selections) and not overwrite:
            WranglerLogger.debug(f"Using cached selection from key: {key}")
            return self._selections[key]
    
        WranglerLogger.debug(f"Getting selection from key: {key}")
        if "links" in selection_dict:
            return RoadwayLinkSelection(self, selection_dict)
        elif "nodes" in selection_dict:
            return RoadwayNodeSelection(self, selection_dict)
        else:
&gt;           raise ValueError("Selection dictionary must have either 'links' or 'nodes' key.")
E           ValueError: Selection dictionary must have either 'links' or 'nodes' key.

network_wrangler/roadway/network.py:283: ValueError</failure></testcase><testcase classname="tests.test_roadway.test_changes.test_roadway_feature_change" name="test_change_multiple_properties_multiple_links" time="0.327"><failure message="ValueError: Selection dictionary must have either 'links' or 'nodes' key.">request = &lt;FixtureRequest for &lt;Function test_change_multiple_properties_multiple_links&gt;&gt;
stpaul_net = RoadwayNetwork(crs=4326, nodes_df=                   model_node_id osm_node_id                   shstReferenceId  driv...0             0             0  LINESTRING (-93.07710 44.93352, -93.07640 44.93387)        0

[66253 rows x 32 columns])

    def test_change_multiple_properties_multiple_links(request, stpaul_net):
        WranglerLogger.info(f"--Starting: {request.node.name}")
        net = copy.deepcopy(stpaul_net)
        # Set facility selection
        _facility = {
            "links": {"name": ["6th", "Sixth", "sixth"]},
            "from": {"osm_node_id": "187899923"},  # Jackson St
            "to": {"osm_node_id": "187865924"},  # Robert St N
        }
        _properties = {
            "lanes": {
                "set": 2,
            },
            "bus_only": {
                "set": 1,
            },
            "drive_access": {
                "set": 0,
            },
        }
        _project_card_dict = {
            "project": "test",
            "roadway_property_change": {
                "facility": _facility,
                "property_changes": _properties,
            },
        }
&gt;       _selected_link_idx = net.get_selection(_facility).selected_links

tests/test_roadway/test_changes/test_roadway_feature_change.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/roadway/selection.py:184: in selected_links
    if self.selected_links_df is None:
network_wrangler/roadway/selection.py:210: in selected_links_df
    self._selected_links_df = self._perform_selection()
network_wrangler/roadway/selection.py:237: in _perform_selection
    _selected_links_df = self.segment.segment_links_df
network_wrangler/roadway/selection.py:198: in segment
    self._segment = Segment(self.net, self)
network_wrangler/roadway/segment.py:140: in __init__
    self.subnet = self._generate_subnet(self.segment_sel_dict)
network_wrangler/roadway/segment.py:282: in _generate_subnet
    if subnet.exists:
network_wrangler/roadway/subnet.py:138: in exists
    if self.subnet_links_df is None:
network_wrangler/roadway/subnet.py:156: in subnet_links_df
    selection = self.net.get_selection(self.selection_dict)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = RoadwayNetwork(crs=4326, nodes_df=                   model_node_id osm_node_id                   shstReferenceId  driv...0             0             0  LINESTRING (-93.07710 44.93352, -93.07640 44.93387)        0

[66253 rows x 32 columns])
selection_dict = {'name': ['6th', 'Sixth', 'sixth']}, overwrite = False

    def get_selection(
        self,
        selection_dict: SelectFacility,
        overwrite: bool = False,
    ) -&gt; Union[RoadwayNodeSelection, RoadwayLinkSelection]:
        """Return selection if it already exists, otherwise performs selection.
    
        Args:
            selection_dict (dict): SelectFacility dictionary.
            overwrite: if True, will overwrite any previously cached searches. Defaults to False.
        """
        key = _create_selection_key(selection_dict)
        if (key in self._selections) and not overwrite:
            WranglerLogger.debug(f"Using cached selection from key: {key}")
            return self._selections[key]
    
        WranglerLogger.debug(f"Getting selection from key: {key}")
        if "links" in selection_dict:
            return RoadwayLinkSelection(self, selection_dict)
        elif "nodes" in selection_dict:
            return RoadwayNodeSelection(self, selection_dict)
        else:
&gt;           raise ValueError("Selection dictionary must have either 'links' or 'nodes' key.")
E           ValueError: Selection dictionary must have either 'links' or 'nodes' key.

network_wrangler/roadway/network.py:283: ValueError</failure></testcase><testcase classname="tests.test_roadway.test_changes.test_roadway_feature_change" name="test_change_multiple_properties_multiple_links_existing_set" time="0.355"><failure message="ValueError: Selection dictionary must have either 'links' or 'nodes' key.">request = &lt;FixtureRequest for &lt;Function test_change_multiple_properties_multiple_links_existing_set&gt;&gt;
stpaul_net = RoadwayNetwork(crs=4326, nodes_df=                   model_node_id osm_node_id                   shstReferenceId  driv...0             0             0  LINESTRING (-93.07710 44.93352, -93.07640 44.93387)        0

[66253 rows x 32 columns])

    def test_change_multiple_properties_multiple_links_existing_set(request, stpaul_net):
        WranglerLogger.info(f"--Starting: {request.node.name}")
        net = copy.deepcopy(stpaul_net)
        # Set facility selection
        _facility = {
            "links": {"name": ["6th", "Sixth", "sixth"]},
            "from": {"osm_node_id": "187899923"},  # Jackson St
            "to": {"osm_node_id": "187865924"},  # Robert St N
        }
        _properties = {
            "lanes": {
                "existing": 1,
                "set": 2,
            },
            "bus_only": {
                "set": 1,
            },
            "drive_access": {
                "set": 0,
            },
        }
        _project_card_dict = {
            "project": "test",
            "roadway_property_change": {
                "facility": _facility,
                "property_changes": _properties,
            },
        }
        _selection = net.get_selection(_facility)
        _p_to_track = ["name"] + list(_properties.keys())
    
        WranglerLogger.debug(f"_p_to_track: {_p_to_track}")
    
        _orig_links = pd.DataFrame(copy.deepcopy(net.links_df))
&gt;       _orig_links = _orig_links.loc[_selection.selected_links, _p_to_track]

tests/test_roadway/test_changes/test_roadway_feature_change.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/roadway/selection.py:184: in selected_links
    if self.selected_links_df is None:
network_wrangler/roadway/selection.py:210: in selected_links_df
    self._selected_links_df = self._perform_selection()
network_wrangler/roadway/selection.py:237: in _perform_selection
    _selected_links_df = self.segment.segment_links_df
network_wrangler/roadway/selection.py:198: in segment
    self._segment = Segment(self.net, self)
network_wrangler/roadway/segment.py:140: in __init__
    self.subnet = self._generate_subnet(self.segment_sel_dict)
network_wrangler/roadway/segment.py:282: in _generate_subnet
    if subnet.exists:
network_wrangler/roadway/subnet.py:138: in exists
    if self.subnet_links_df is None:
network_wrangler/roadway/subnet.py:156: in subnet_links_df
    selection = self.net.get_selection(self.selection_dict)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = RoadwayNetwork(crs=4326, nodes_df=                   model_node_id osm_node_id                   shstReferenceId  driv...0             0             0  LINESTRING (-93.07710 44.93352, -93.07640 44.93387)        0

[66253 rows x 32 columns])
selection_dict = {'name': ['6th', 'Sixth', 'sixth']}, overwrite = False

    def get_selection(
        self,
        selection_dict: SelectFacility,
        overwrite: bool = False,
    ) -&gt; Union[RoadwayNodeSelection, RoadwayLinkSelection]:
        """Return selection if it already exists, otherwise performs selection.
    
        Args:
            selection_dict (dict): SelectFacility dictionary.
            overwrite: if True, will overwrite any previously cached searches. Defaults to False.
        """
        key = _create_selection_key(selection_dict)
        if (key in self._selections) and not overwrite:
            WranglerLogger.debug(f"Using cached selection from key: {key}")
            return self._selections[key]
    
        WranglerLogger.debug(f"Getting selection from key: {key}")
        if "links" in selection_dict:
            return RoadwayLinkSelection(self, selection_dict)
        elif "nodes" in selection_dict:
            return RoadwayNodeSelection(self, selection_dict)
        else:
&gt;           raise ValueError("Selection dictionary must have either 'links' or 'nodes' key.")
E           ValueError: Selection dictionary must have either 'links' or 'nodes' key.

network_wrangler/roadway/network.py:283: ValueError</failure></testcase><testcase classname="tests.test_roadway.test_changes.test_roadway_feature_change" name="test_add_adhoc_field" time="0.499" /><testcase classname="tests.test_roadway.test_changes.test_roadway_feature_change" name="test_add_default_value" time="7.092" /><testcase classname="tests.test_roadway.test_changes.test_roadway_feature_change" name="test_add_adhoc_field_from_card" time="0.399"><failure message="ValueError: Selection dictionary must have either 'links' or 'nodes' key.">request = &lt;FixtureRequest for &lt;Function test_add_adhoc_field_from_card&gt;&gt;
stpaul_net = RoadwayNetwork(crs=4326, nodes_df=                   model_node_id osm_node_id                   shstReferenceId  driv...0             0             0  LINESTRING (-93.07710 44.93352, -93.07640 44.93387)        0

[66253 rows x 32 columns])
stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    def test_add_adhoc_field_from_card(request, stpaul_net, stpaul_ex_dir):
        """New fields can be added from a project card and that they will be the right type."""
        WranglerLogger.info(f"--Starting: {request.node.name}")
        net = copy.deepcopy(stpaul_net)
        project_card_name = "road.prop_change.new_fields.yml"
    
        project_card_path = os.path.join(stpaul_ex_dir, "project_cards", project_card_name)
        project_card = read_card(project_card_path)
    
&gt;       selected_link_indices = net.get_selection(project_card.facility).selected_links

tests/test_roadway/test_changes/test_roadway_feature_change.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/roadway/selection.py:184: in selected_links
    if self.selected_links_df is None:
network_wrangler/roadway/selection.py:210: in selected_links_df
    self._selected_links_df = self._perform_selection()
network_wrangler/roadway/selection.py:237: in _perform_selection
    _selected_links_df = self.segment.segment_links_df
network_wrangler/roadway/selection.py:198: in segment
    self._segment = Segment(self.net, self)
network_wrangler/roadway/segment.py:140: in __init__
    self.subnet = self._generate_subnet(self.segment_sel_dict)
network_wrangler/roadway/segment.py:282: in _generate_subnet
    if subnet.exists:
network_wrangler/roadway/subnet.py:138: in exists
    if self.subnet_links_df is None:
network_wrangler/roadway/subnet.py:156: in subnet_links_df
    selection = self.net.get_selection(self.selection_dict)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = RoadwayNetwork(crs=4326, nodes_df=                   model_node_id osm_node_id                   shstReferenceId  driv...0             0             0  LINESTRING (-93.07710 44.93352, -93.07640 44.93387)        0

[66253 rows x 32 columns])
selection_dict = {'name': ['6th', 'Sixth', 'sixth']}, overwrite = False

    def get_selection(
        self,
        selection_dict: SelectFacility,
        overwrite: bool = False,
    ) -&gt; Union[RoadwayNodeSelection, RoadwayLinkSelection]:
        """Return selection if it already exists, otherwise performs selection.
    
        Args:
            selection_dict (dict): SelectFacility dictionary.
            overwrite: if True, will overwrite any previously cached searches. Defaults to False.
        """
        key = _create_selection_key(selection_dict)
        if (key in self._selections) and not overwrite:
            WranglerLogger.debug(f"Using cached selection from key: {key}")
            return self._selections[key]
    
        WranglerLogger.debug(f"Getting selection from key: {key}")
        if "links" in selection_dict:
            return RoadwayLinkSelection(self, selection_dict)
        elif "nodes" in selection_dict:
            return RoadwayNodeSelection(self, selection_dict)
        else:
&gt;           raise ValueError("Selection dictionary must have either 'links' or 'nodes' key.")
E           ValueError: Selection dictionary must have either 'links' or 'nodes' key.

network_wrangler/roadway/network.py:283: ValueError</failure></testcase><testcase classname="tests.test_roadway.test_changes.test_roadway_feature_change" name="test_change_node_xy" time="1.005" /><testcase classname="tests.test_transit.test_clip" name="test_clip_transit_node_ids" time="0.156"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">small_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/small')

    @pytest.fixture(scope="module")
    def small_transit_net(small_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(small_ex_dir)

tests/conftest.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1559e6890&gt;
table_name = 'shapes'
table =   shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence  shape_model_node_id
0   shape1     44.949744    -93.094894 ...                  3                    3
5   shape2     44.951659    -93.091490                  4                    4
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_clip" name="test_clip_transit_min_stops" time="0.002"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">small_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/small')

    @pytest.fixture(scope="module")
    def small_transit_net(small_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(small_ex_dir)

tests/conftest.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1559e6890&gt;
table_name = 'shapes'
table =   shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence  shape_model_node_id
0   shape1     44.949744    -93.094894 ...                  3                    3
5   shape2     44.951659    -93.091490                  4                    4
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_clip" name="test_clip_transit_boundary_geocode" time="0.147"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.fixture(scope="module")
    def stpaul_transit_net(stpaul_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(stpaul_ex_dir)

tests/conftest.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1559b21d0&gt;
table_name = 'shapes'
table =       shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence shape_osm_node_id  shape_model_node_id
0      4520004   ... 4890070     44.931310    -93.139579                 37        3071141242               137686

[2069 rows x 6 columns]
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_clip" name="test_clip_transit_to_roadway" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.fixture(scope="module")
    def stpaul_transit_net(stpaul_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(stpaul_ex_dir)

tests/conftest.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1559b21d0&gt;
table_name = 'shapes'
table =       shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence shape_osm_node_id  shape_model_node_id
0      4520004   ... 4890070     44.931310    -93.139579                 37        3071141242               137686

[2069 rows x 6 columns]
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_feed" name="test_table_names_with_field[route_short_name-expected_tables0]" time="0.103"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">small_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/small')

    @pytest.fixture(scope="module")
    def small_transit_net(small_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(small_ex_dir)

tests/conftest.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1559318a0&gt;
table_name = 'shapes'
table =   shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence  shape_model_node_id
0   shape1     44.949744    -93.094894 ...                  3                    3
5   shape2     44.951659    -93.091490                  4                    4
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_feed" name="test_table_names_with_field[agency_id-expected_tables1]" time="0.002"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">small_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/small')

    @pytest.fixture(scope="module")
    def small_transit_net(small_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(small_ex_dir)

tests/conftest.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1559318a0&gt;
table_name = 'shapes'
table =   shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence  shape_model_node_id
0   shape1     44.949744    -93.094894 ...                  3                    3
5   shape2     44.951659    -93.091490                  4                    4
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_feed" name="test_table_names_with_field[wheelchair_boarding-expected_tables2]" time="0.006"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">small_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/small')

    @pytest.fixture(scope="module")
    def small_transit_net(small_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(small_ex_dir)

tests/conftest.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1559318a0&gt;
table_name = 'shapes'
table =   shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence  shape_model_node_id
0   shape1     44.949744    -93.094894 ...                  3                    3
5   shape2     44.951659    -93.091490                  4                    4
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_feed" name="test_trip_stop_times" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">small_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/small')

    @pytest.fixture(scope="module")
    def small_transit_net(small_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(small_ex_dir)

tests/conftest.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1559318a0&gt;
table_name = 'shapes'
table =   shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence  shape_model_node_id
0   shape1     44.949744    -93.094894 ...                  3                    3
5   shape2     44.951659    -93.091490                  4                    4
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_feed" name="test_trip_shape_id" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">small_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/small')

    @pytest.fixture(scope="module")
    def small_transit_net(small_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(small_ex_dir)

tests/conftest.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1559318a0&gt;
table_name = 'shapes'
table =   shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence  shape_model_node_id
0   shape1     44.949744    -93.094894 ...                  3                    3
5   shape2     44.951659    -93.091490                  4                    4
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_feed" name="test_trip_shape" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">small_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/small')

    @pytest.fixture(scope="module")
    def small_transit_net(small_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(small_ex_dir)

tests/conftest.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1559318a0&gt;
table_name = 'shapes'
table =   shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence  shape_model_node_id
0   shape1     44.949744    -93.094894 ...                  3                    3
5   shape2     44.951659    -93.091490                  4                    4
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_feed" name="test_trip_stop_pattern[tpat_test0]" time="0.225"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.fixture(scope="module")
    def stpaul_transit_net(stpaul_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(stpaul_ex_dir)

tests/conftest.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x155925240&gt;
table_name = 'shapes'
table =       shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence shape_osm_node_id  shape_model_node_id
0      4520004   ... 4890070     44.931310    -93.139579                 37        3071141242               137686

[2069 rows x 6 columns]
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_feed" name="test_trip_stop_pattern[tpat_test1]" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.fixture(scope="module")
    def stpaul_transit_net(stpaul_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(stpaul_ex_dir)

tests/conftest.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x155925240&gt;
table_name = 'shapes'
table =       shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence shape_osm_node_id  shape_model_node_id
0      4520004   ... 4890070     44.931310    -93.139579                 37        3071141242               137686

[2069 rows x 6 columns]
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_feed" name="test_trip_stop_pattern[tpat_test2]" time="0.002"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.fixture(scope="module")
    def stpaul_transit_net(stpaul_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(stpaul_ex_dir)

tests/conftest.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x155925240&gt;
table_name = 'shapes'
table =       shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence shape_osm_node_id  shape_model_node_id
0      4520004   ... 4890070     44.931310    -93.139579                 37        3071141242               137686

[2069 rows x 6 columns]
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_feed" name="test_trip_stop_pattern[tpat_test3]" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.fixture(scope="module")
    def stpaul_transit_net(stpaul_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(stpaul_ex_dir)

tests/conftest.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x155925240&gt;
table_name = 'shapes'
table =       shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence shape_osm_node_id  shape_model_node_id
0      4520004   ... 4890070     44.931310    -93.139579                 37        3071141242               137686

[2069 rows x 6 columns]
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_feed" name="test_stop_times_for_trip_id" time="0.006"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">small_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/small')

    @pytest.fixture(scope="module")
    def small_transit_net(small_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(small_ex_dir)

tests/conftest.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1559318a0&gt;
table_name = 'shapes'
table =   shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence  shape_model_node_id
0   shape1     44.949744    -93.094894 ...                  3                    3
5   shape2     44.951659    -93.091490                  4                    4
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_feed" name="test_shape_id_for_trip_id" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">small_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/small')

    @pytest.fixture(scope="module")
    def small_transit_net(small_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(small_ex_dir)

tests/conftest.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1559318a0&gt;
table_name = 'shapes'
table =   shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence  shape_model_node_id
0   shape1     44.949744    -93.094894 ...                  3                    3
5   shape2     44.951659    -93.091490                  4                    4
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_feed" name="test_shapes_for_trip_id" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">small_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/small')

    @pytest.fixture(scope="module")
    def small_transit_net(small_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(small_ex_dir)

tests/conftest.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1559318a0&gt;
table_name = 'shapes'
table =   shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence  shape_model_node_id
0   shape1     44.949744    -93.094894 ...                  3                    3
5   shape2     44.951659    -93.091490                  4                    4
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_feed" name="test_stop_times_for_pickup_dropoff_trip_id" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">small_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/small')

    @pytest.fixture(scope="module")
    def small_transit_net(small_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(small_ex_dir)

tests/conftest.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1559318a0&gt;
table_name = 'shapes'
table =   shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence  shape_model_node_id
0   shape1     44.949744    -93.094894 ...                  3                    3
5   shape2     44.951659    -93.091490                  4                    4
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_feed" name="test_stop_id_pattern_for_trip" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">small_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/small')

    @pytest.fixture(scope="module")
    def small_transit_net(small_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(small_ex_dir)

tests/conftest.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1559318a0&gt;
table_name = 'shapes'
table =   shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence  shape_model_node_id
0   shape1     44.949744    -93.094894 ...                  3                    3
5   shape2     44.951659    -93.091490                  4                    4
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_feed" name="test_feed_equality" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">small_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/small')

    @pytest.fixture(scope="module")
    def small_transit_net(small_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(small_ex_dir)

tests/conftest.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1559318a0&gt;
table_name = 'shapes'
table =   shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence  shape_model_node_id
0   shape1     44.949744    -93.094894 ...                  3                    3
5   shape2     44.951659    -93.091490                  4                    4
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_feed" name="test_filter_shapes_to_links" time="0.072" /><testcase classname="tests.test_transit.test_feed" name="test_filter_stop_times_to_links" time="0.034" /><testcase classname="tests.test_transit.test_io" name="test_transit_read_write_small" time="0.104"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">small_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/small')

    @pytest.fixture(scope="module")
    def small_transit_net(small_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(small_ex_dir)

tests/conftest.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x15b4a1c90&gt;
table_name = 'shapes'
table =   shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence  shape_model_node_id
0   shape1     44.949744    -93.094894 ...                  3                    3
5   shape2     44.951659    -93.091490                  4                    4
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_io" name="test_transit_read_write" time="0.148"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.fixture(scope="module")
    def stpaul_transit_net(stpaul_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(stpaul_ex_dir)

tests/conftest.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1562739a0&gt;
table_name = 'shapes'
table =       shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence shape_osm_node_id  shape_model_node_id
0      4520004   ... 4890070     44.931310    -93.139579                 37        3071141242               137686

[2069 rows x 6 columns]
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_io" name="test_bad_dir" time="0.001" /><testcase classname="tests.test_transit.test_io" name="test_missing_files" time="0.003" /><testcase classname="tests.test_transit.test_io" name="test_bad_fk" time="0.111" /><testcase classname="tests.test_transit.test_io" name="test_bad_prop_vals" time="0.096" /><testcase classname="tests.test_transit.test_io" name="test_missing_props" time="0.077" /><testcase classname="tests.test_transit.test_io" name="test_write_feed_geo" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">small_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/small')

    @pytest.fixture(scope="module")
    def small_transit_net(small_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(small_ex_dir)

tests/conftest.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x15b4a1c90&gt;
table_name = 'shapes'
table =   shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence  shape_model_node_id
0   shape1     44.949744    -93.094894 ...                  3                    3
5   shape2     44.951659    -93.091490                  4                    4
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_io" name="test_write_feed_geo_w_shapes" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.fixture(scope="module")
    def stpaul_transit_net(stpaul_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(stpaul_ex_dir)

tests/conftest.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1562739a0&gt;
table_name = 'shapes'
table =       shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence shape_osm_node_id  shape_model_node_id
0      4520004   ... 4890070     44.931310    -93.139579                 37        3071141242               137686

[2069 rows x 6 columns]
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_selections" name="test_select_transit_features_by_properties[selection0]" time="0.138"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.fixture(scope="module")
    def stpaul_transit_net(stpaul_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(stpaul_ex_dir)

tests/conftest.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1562ff310&gt;
table_name = 'shapes'
table =       shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence shape_osm_node_id  shape_model_node_id
0      4520004   ... 4890070     44.931310    -93.139579                 37        3071141242               137686

[2069 rows x 6 columns]
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_selections" name="test_select_transit_features_by_properties[selection1]" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.fixture(scope="module")
    def stpaul_transit_net(stpaul_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(stpaul_ex_dir)

tests/conftest.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1562ff310&gt;
table_name = 'shapes'
table =       shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence shape_osm_node_id  shape_model_node_id
0      4520004   ... 4890070     44.931310    -93.139579                 37        3071141242               137686

[2069 rows x 6 columns]
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_selections" name="test_select_transit_features_by_properties[selection2]" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.fixture(scope="module")
    def stpaul_transit_net(stpaul_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(stpaul_ex_dir)

tests/conftest.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1562ff310&gt;
table_name = 'shapes'
table =       shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence shape_osm_node_id  shape_model_node_id
0      4520004   ... 4890070     44.931310    -93.139579                 37        3071141242               137686

[2069 rows x 6 columns]
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_selections" name="test_select_transit_features_by_properties[selection3]" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.fixture(scope="module")
    def stpaul_transit_net(stpaul_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(stpaul_ex_dir)

tests/conftest.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1562ff310&gt;
table_name = 'shapes'
table =       shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence shape_osm_node_id  shape_model_node_id
0      4520004   ... 4890070     44.931310    -93.139579                 37        3071141242               137686

[2069 rows x 6 columns]
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_selections" name="test_select_transit_features_by_properties[selection4]" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.fixture(scope="module")
    def stpaul_transit_net(stpaul_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(stpaul_ex_dir)

tests/conftest.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1562ff310&gt;
table_name = 'shapes'
table =       shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence shape_osm_node_id  shape_model_node_id
0      4520004   ... 4890070     44.931310    -93.139579                 37        3071141242               137686

[2069 rows x 6 columns]
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_selections" name="test_select_transit_features_by_properties[selection5]" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.fixture(scope="module")
    def stpaul_transit_net(stpaul_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(stpaul_ex_dir)

tests/conftest.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1562ff310&gt;
table_name = 'shapes'
table =       shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence shape_osm_node_id  shape_model_node_id
0      4520004   ... 4890070     44.931310    -93.139579                 37        3071141242               137686

[2069 rows x 6 columns]
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_selections" name="test_select_transit_features_by_properties[selection6]" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.fixture(scope="module")
    def stpaul_transit_net(stpaul_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(stpaul_ex_dir)

tests/conftest.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1562ff310&gt;
table_name = 'shapes'
table =       shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence shape_osm_node_id  shape_model_node_id
0      4520004   ... 4890070     44.931310    -93.139579                 37        3071141242               137686

[2069 rows x 6 columns]
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_selections" name="test_select_transit_features_by_properties[selection7]" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.fixture(scope="module")
    def stpaul_transit_net(stpaul_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(stpaul_ex_dir)

tests/conftest.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1562ff310&gt;
table_name = 'shapes'
table =       shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence shape_osm_node_id  shape_model_node_id
0      4520004   ... 4890070     44.931310    -93.139579                 37        3071141242               137686

[2069 rows x 6 columns]
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_selections" name="test_select_transit_features_by_properties[selection8]" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.fixture(scope="module")
    def stpaul_transit_net(stpaul_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(stpaul_ex_dir)

tests/conftest.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1562ff310&gt;
table_name = 'shapes'
table =       shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence shape_osm_node_id  shape_model_node_id
0      4520004   ... 4890070     44.931310    -93.139579                 37        3071141242               137686

[2069 rows x 6 columns]
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_selections" name="test_zero_valid_facilities" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.fixture(scope="module")
    def stpaul_transit_net(stpaul_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(stpaul_ex_dir)

tests/conftest.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1562ff310&gt;
table_name = 'shapes'
table =       shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence shape_osm_node_id  shape_model_node_id
0      4520004   ... 4890070     44.931310    -93.139579                 37        3071141242               137686

[2069 rows x 6 columns]
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_selections" name="test_invalid_selection_key" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.fixture(scope="module")
    def stpaul_transit_net(stpaul_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(stpaul_ex_dir)

tests/conftest.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1562ff310&gt;
table_name = 'shapes'
table =       shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence shape_osm_node_id  shape_model_node_id
0      4520004   ... 4890070     44.931310    -93.139579                 37        3071141242               137686

[2069 rows x 6 columns]
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_selections" name="test_invalid_selection_property_format" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.fixture(scope="module")
    def stpaul_transit_net(stpaul_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(stpaul_ex_dir)

tests/conftest.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1562ff310&gt;
table_name = 'shapes'
table =       shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence shape_osm_node_id  shape_model_node_id
0      4520004   ... 4890070     44.931310    -93.139579                 37        3071141242               137686

[2069 rows x 6 columns]
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_selections" name="test_invalid_selection_property" time="0.002"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.fixture(scope="module")
    def stpaul_transit_net(stpaul_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(stpaul_ex_dir)

tests/conftest.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1562ff310&gt;
table_name = 'shapes'
table =       shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence shape_osm_node_id  shape_model_node_id
0      4520004   ... 4890070     44.931310    -93.139579                 37        3071141242               137686

[2069 rows x 6 columns]
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_selections" name="test_invalid_optional_selection_variable" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.fixture(scope="module")
    def stpaul_transit_net(stpaul_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(stpaul_ex_dir)

tests/conftest.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1562ff310&gt;
table_name = 'shapes'
table =       shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence shape_osm_node_id  shape_model_node_id
0      4520004   ... 4890070     44.931310    -93.139579                 37        3071141242               137686

[2069 rows x 6 columns]
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_selections" name="test_correct_optional_selection_variable" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.fixture(scope="module")
    def stpaul_transit_net(stpaul_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(stpaul_ex_dir)

tests/conftest.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1562ff310&gt;
table_name = 'shapes'
table =       shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence shape_osm_node_id  shape_model_node_id
0      4520004   ... 4890070     44.931310    -93.139579                 37        3071141242               137686

[2069 rows x 6 columns]
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_selections" name="test_select_transit_features_by_nodes[selection0]" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.fixture(scope="module")
    def stpaul_transit_net(stpaul_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(stpaul_ex_dir)

tests/conftest.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1562ff310&gt;
table_name = 'shapes'
table =       shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence shape_osm_node_id  shape_model_node_id
0      4520004   ... 4890070     44.931310    -93.139579                 37        3071141242               137686

[2069 rows x 6 columns]
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_selections" name="test_select_transit_features_by_nodes[selection1]" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.fixture(scope="module")
    def stpaul_transit_net(stpaul_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(stpaul_ex_dir)

tests/conftest.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1562ff310&gt;
table_name = 'shapes'
table =       shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence shape_osm_node_id  shape_model_node_id
0      4520004   ... 4890070     44.931310    -93.139579                 37        3071141242               137686

[2069 rows x 6 columns]
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_selections" name="test_select_transit_features_by_links[selection0]" time="0.002"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.fixture(scope="module")
    def stpaul_transit_net(stpaul_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(stpaul_ex_dir)

tests/conftest.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1562ff310&gt;
table_name = 'shapes'
table =       shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence shape_osm_node_id  shape_model_node_id
0      4520004   ... 4890070     44.931310    -93.139579                 37        3071141242               137686

[2069 rows x 6 columns]
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_selections" name="test_select_transit_features_by_links[selection1]" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.fixture(scope="module")
    def stpaul_transit_net(stpaul_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(stpaul_ex_dir)

tests/conftest.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1562ff310&gt;
table_name = 'shapes'
table =       shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence shape_osm_node_id  shape_model_node_id
0      4520004   ... 4890070     44.931310    -93.139579                 37        3071141242               137686

[2069 rows x 6 columns]
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_transit" name="test_apply_transit_feature_change_from_projectcard[test_project0]" time="0.145"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.fixture(scope="module")
    def stpaul_transit_net(stpaul_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(stpaul_ex_dir)

tests/conftest.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x156286860&gt;
table_name = 'shapes'
table =       shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence shape_osm_node_id  shape_model_node_id
0      4520004   ... 4890070     44.931310    -93.139579                 37        3071141242               137686

[2069 rows x 6 columns]
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_transit" name="test_apply_transit_feature_change_from_projectcard[test_project1]" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.fixture(scope="module")
    def stpaul_transit_net(stpaul_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(stpaul_ex_dir)

tests/conftest.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x156286860&gt;
table_name = 'shapes'
table =       shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence shape_osm_node_id  shape_model_node_id
0      4520004   ... 4890070     44.931310    -93.139579                 37        3071141242               137686

[2069 rows x 6 columns]
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_transit" name="test_apply_transit_feature_change_from_projectcard[test_project2]" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.fixture(scope="module")
    def stpaul_transit_net(stpaul_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(stpaul_ex_dir)

tests/conftest.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x156286860&gt;
table_name = 'shapes'
table =       shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence shape_osm_node_id  shape_model_node_id
0      4520004   ... 4890070     44.931310    -93.139579                 37        3071141242               137686

[2069 rows x 6 columns]
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_transit" name="test_wrong_existing" time="0.002"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.fixture(scope="module")
    def stpaul_transit_net(stpaul_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(stpaul_ex_dir)

tests/conftest.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x156286860&gt;
table_name = 'shapes'
table =       shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence shape_osm_node_id  shape_model_node_id
0      4520004   ... 4890070     44.931310    -93.139579                 37        3071141242               137686

[2069 rows x 6 columns]
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_transit" name="test_transit_road_consistencies" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.fixture(scope="module")
    def stpaul_transit_net(stpaul_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(stpaul_ex_dir)

tests/conftest.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x156286860&gt;
table_name = 'shapes'
table =       shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence shape_osm_node_id  shape_model_node_id
0      4520004   ... 4890070     44.931310    -93.139579                 37        3071141242               137686

[2069 rows x 6 columns]
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_changes.test_transit_prop_changes" name="test_invalid_field_value_set" time="0.123"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">small_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/small')

    @pytest.fixture(scope="module")
    def small_transit_net(small_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(small_ex_dir)

tests/conftest.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x156471cf0&gt;
table_name = 'shapes'
table =   shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence  shape_model_node_id
0   shape1     44.949744    -93.094894 ...                  3                    3
5   shape2     44.951659    -93.091490                  4                    4
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_changes.test_transit_prop_changes" name="test_force_invalid_field_value" time="0.002"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">small_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/small')

    @pytest.fixture(scope="module")
    def small_transit_net(small_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(small_ex_dir)

tests/conftest.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x156471cf0&gt;
table_name = 'shapes'
table =   shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence  shape_model_node_id
0   shape1     44.949744    -93.094894 ...                  3                    3
5   shape2     44.951659    -93.091490                  4                    4
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_changes.test_transit_prop_changes" name="test_valid_field_value_set" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">small_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/small')

    @pytest.fixture(scope="module")
    def small_transit_net(small_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(small_ex_dir)

tests/conftest.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x156471cf0&gt;
table_name = 'shapes'
table =   shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence  shape_model_node_id
0   shape1     44.949744    -93.094894 ...                  3                    3
5   shape2     44.951659    -93.091490                  4                    4
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_changes.test_transit_prop_changes" name="test_coerce_over24hr_times" time="0.001"><skipped type="pytest.xfail" message="" /></testcase><testcase classname="tests.test_transit.test_changes.test_transit_route_changes" name="test_replace_shapes_segment[test_routing0]" time="0.119"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">small_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/small')

    @pytest.fixture(scope="module")
    def small_transit_net(small_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(small_ex_dir)

tests/conftest.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1557b37c0&gt;
table_name = 'shapes'
table =   shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence  shape_model_node_id
0   shape1     44.949744    -93.094894 ...                  3                    3
5   shape2     44.951659    -93.091490                  4                    4
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_changes.test_transit_route_changes" name="test_replace_shapes_segment[test_routing1]" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">small_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/small')

    @pytest.fixture(scope="module")
    def small_transit_net(small_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(small_ex_dir)

tests/conftest.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1557b37c0&gt;
table_name = 'shapes'
table =   shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence  shape_model_node_id
0   shape1     44.949744    -93.094894 ...                  3                    3
5   shape2     44.951659    -93.091490                  4                    4
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_changes.test_transit_route_changes" name="test_replace_shapes_segment[test_routing2]" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">small_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/small')

    @pytest.fixture(scope="module")
    def small_transit_net(small_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(small_ex_dir)

tests/conftest.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1557b37c0&gt;
table_name = 'shapes'
table =   shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence  shape_model_node_id
0   shape1     44.949744    -93.094894 ...                  3                    3
5   shape2     44.951659    -93.091490                  4                    4
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_changes.test_transit_route_changes" name="test_replace_shapes_segment[test_routing3]" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">small_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/small')

    @pytest.fixture(scope="module")
    def small_transit_net(small_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(small_ex_dir)

tests/conftest.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1557b37c0&gt;
table_name = 'shapes'
table =   shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence  shape_model_node_id
0   shape1     44.949744    -93.094894 ...                  3                    3
5   shape2     44.951659    -93.091490                  4                    4
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_changes.test_transit_route_changes" name="test_replace_shapes_segment[test_routing4]" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">small_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/small')

    @pytest.fixture(scope="module")
    def small_transit_net(small_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(small_ex_dir)

tests/conftest.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1557b37c0&gt;
table_name = 'shapes'
table =   shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence  shape_model_node_id
0   shape1     44.949744    -93.094894 ...                  3                    3
5   shape2     44.951659    -93.091490                  4                    4
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_changes.test_transit_route_changes" name="test_replace_shapes_segment[test_routing5]" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">small_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/small')

    @pytest.fixture(scope="module")
    def small_transit_net(small_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(small_ex_dir)

tests/conftest.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1557b37c0&gt;
table_name = 'shapes'
table =   shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence  shape_model_node_id
0   shape1     44.949744    -93.094894 ...                  3                    3
5   shape2     44.951659    -93.091490                  4                    4
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_changes.test_transit_route_changes" name="test_route_changes[test_routing0]" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">small_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/small')

    @pytest.fixture(scope="module")
    def small_transit_net(small_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(small_ex_dir)

tests/conftest.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1557b37c0&gt;
table_name = 'shapes'
table =   shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence  shape_model_node_id
0   shape1     44.949744    -93.094894 ...                  3                    3
5   shape2     44.951659    -93.091490                  4                    4
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_changes.test_transit_route_changes" name="test_route_changes[test_routing1]" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">small_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/small')

    @pytest.fixture(scope="module")
    def small_transit_net(small_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(small_ex_dir)

tests/conftest.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1557b37c0&gt;
table_name = 'shapes'
table =   shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence  shape_model_node_id
0   shape1     44.949744    -93.094894 ...                  3                    3
5   shape2     44.951659    -93.091490                  4                    4
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_changes.test_transit_route_changes" name="test_route_changes[test_routing2]" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">small_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/small')

    @pytest.fixture(scope="module")
    def small_transit_net(small_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(small_ex_dir)

tests/conftest.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1557b37c0&gt;
table_name = 'shapes'
table =   shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence  shape_model_node_id
0   shape1     44.949744    -93.094894 ...                  3                    3
5   shape2     44.951659    -93.091490                  4                    4
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_changes.test_transit_route_changes" name="test_route_changes[test_routing3]" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">small_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/small')

    @pytest.fixture(scope="module")
    def small_transit_net(small_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(small_ex_dir)

tests/conftest.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1557b37c0&gt;
table_name = 'shapes'
table =   shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence  shape_model_node_id
0   shape1     44.949744    -93.094894 ...                  3                    3
5   shape2     44.951659    -93.091490                  4                    4
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_changes.test_transit_route_changes" name="test_route_changes[test_routing4]" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">small_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/small')

    @pytest.fixture(scope="module")
    def small_transit_net(small_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(small_ex_dir)

tests/conftest.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1557b37c0&gt;
table_name = 'shapes'
table =   shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence  shape_model_node_id
0   shape1     44.949744    -93.094894 ...                  3                    3
5   shape2     44.951659    -93.091490                  4                    4
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_changes.test_transit_route_changes" name="test_route_changes[test_routing5]" time="0.003"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">small_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/small')

    @pytest.fixture(scope="module")
    def small_transit_net(small_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(small_ex_dir)

tests/conftest.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1557b37c0&gt;
table_name = 'shapes'
table =   shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence  shape_model_node_id
0   shape1     44.949744    -93.094894 ...                  3                    3
5   shape2     44.951659    -93.091490                  4                    4
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_changes.test_transit_route_changes" name="test_route_changes[test_routing6]" time="0.011"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">small_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/small')

    @pytest.fixture(scope="module")
    def small_transit_net(small_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(small_ex_dir)

tests/conftest.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1557b37c0&gt;
table_name = 'shapes'
table =   shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence  shape_model_node_id
0   shape1     44.949744    -93.094894 ...                  3                    3
5   shape2     44.951659    -93.091490                  4                    4
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_changes.test_transit_route_changes" name="test_route_changes[test_routing7]" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">small_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/small')

    @pytest.fixture(scope="module")
    def small_transit_net(small_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(small_ex_dir)

tests/conftest.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1557b37c0&gt;
table_name = 'shapes'
table =   shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence  shape_model_node_id
0   shape1     44.949744    -93.094894 ...                  3                    3
5   shape2     44.951659    -93.091490                  4                    4
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_changes.test_transit_route_changes" name="test_route_changes[test_routing8]" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">small_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/small')

    @pytest.fixture(scope="module")
    def small_transit_net(small_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(small_ex_dir)

tests/conftest.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1557b37c0&gt;
table_name = 'shapes'
table =   shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence  shape_model_node_id
0   shape1     44.949744    -93.094894 ...                  3                    3
5   shape2     44.951659    -93.091490                  4                    4
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_changes.test_transit_route_changes" name="test_route_changes[test_routing9]" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">small_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/small')

    @pytest.fixture(scope="module")
    def small_transit_net(small_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(small_ex_dir)

tests/conftest.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x1557b37c0&gt;
table_name = 'shapes'
table =   shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence  shape_model_node_id
0   shape1     44.949744    -93.094894 ...                  3                    3
5   shape2     44.951659    -93.091490                  4                    4
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_changes.test_transit_route_changes" name="test_route_changes_project_card" time="12.127"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.fixture(scope="module")
    def stpaul_transit_net(stpaul_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(stpaul_ex_dir)

tests/conftest.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x156471930&gt;
table_name = 'shapes'
table =       shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence shape_osm_node_id  shape_model_node_id
0      4520004   ... 4890070     44.931310    -93.139579                 37        3071141242               137686

[2069 rows x 6 columns]
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_transit.test_changes.test_transit_route_changes" name="test_wo_existing" time="0.001"><error message="failed on setup with &quot;network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.&quot;">stpaul_ex_dir = PosixPath('/Users/elizabeth/Documents/urbanlabs/MetCouncil/NetworkWrangler/working/network_wrangler/examples/stpaul')

    @pytest.fixture(scope="module")
    def stpaul_transit_net(stpaul_ex_dir):
        from network_wrangler import load_transit
    
&gt;       return load_transit(stpaul_ex_dir)

tests/conftest.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
network_wrangler/transit/io.py:156: in load_transit
    feed_obj = load_feed_from_path(feed, suffix=suffix)
network_wrangler/transit/io.py:76: in load_feed_from_path
    return load_feed_from_dfs(feed_dfs)
network_wrangler/transit/io.py:116: in load_feed_from_dfs
    feed = Feed(**feed_dfs)
network_wrangler/transit/feed/feed.py:90: in __init__
    self.initialize_tables(**kwargs)
network_wrangler/models/_base/db.py:135: in initialize_tables
    self.__setattr__(table, kwargs[table])
network_wrangler/models/_base/db.py:83: in __setattr__
    df = self.validate_coerce_table(key, value)
network_wrangler/models/_base/db.py:107: in validate_coerce_table
    self.check_table_fks(table_name, table=table)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;network_wrangler.transit.feed.feed.Feed object at 0x156471930&gt;
table_name = 'shapes'
table =       shape_id  shape_pt_lat  shape_pt_lon  shape_pt_sequence shape_osm_node_id  shape_model_node_id
0      4520004   ... 4890070     44.931310    -93.139579                 37        3071141242               137686

[2069 rows x 6 columns]
raise_error = True

    def check_table_fks(
        self, table_name: str, table: pd.DataFrame, raise_error: bool = True
    ) -&gt; bool:
        """Return True if the foreign key fields in table have valid references.
    
        Note: will return true and give a warning if the specified foreign key table doesn't exist.
        """
        WranglerLogger.debug(f"Checking foreign keys for {table_name}")
        fks = self.fks()
        if table_name not in fks:
            return True
        if table is None:
            table = self.get_table(table_name)
        all_valid = True
        for field, fk in fks[table_name].items():
            fk_table_name, fk_field = fk
            if field not in table:
                WranglerLogger.warning(
                    f"Foreign key value {field} not in {table_name} -\
                    skipping validation"
                )
                continue
    
            if fk_table_name not in self.table_names:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in table list - skipping validation."
                )
                continue
            try:
                fk_table = self.get_table(fk_table_name)
            except RequiredTableError:
                WranglerLogger.warning(
                    f"Table {fk_table_name} for specified FK \
                    {table_name}.{field} not in {type(self)}-  \
                    skipping validation."
                )
                continue
            if fk_field not in fk_table:
                WranglerLogger.error(
                    f"!!! {fk_table_name} missing {fk_field} field used as FK\
                                    ref in {table_name}.{field}."
                )
                all_valid = False
                continue
            valid, missing = fk_in_pk(table[field], fk_table[fk_field])
            if missing:
                WranglerLogger.error(
                    f"!!! {fk_table_name}.{fk_field} missing values used as FK\
                      in {table_name}.{field}: \n_missing"
                )
            all_valid = valid and all_valid
    
        if not all_valid:
            if raise_error:
&gt;               raise ForeignKeyValueError("FK fields/ values referenced in {table_name} missing.")
E               network_wrangler.models._base.db.ForeignKeyValueError: FK fields/ values referenced in {table_name} missing.

network_wrangler/models/_base/db.py:282: ForeignKeyValueError</error></testcase><testcase classname="tests.test_utils.test_data" name="test_update_df_by_col_value" time="0.019" /><testcase classname="tests.test_utils.test_data" name="test_update_df_by_col_value_missing_ids" time="0.002" /><testcase classname="tests.test_utils.test_data" name="test_update_df_by_col_value_missing_properties" time="0.005" /><testcase classname="tests.test_utils.test_data" name="test_update_df_by_col_value_non_unique_join_col" time="0.023" /><testcase classname="tests.test_utils.test_data" name="test_dict_to_query_single_key_value" time="0.003" /><testcase classname="tests.test_utils.test_data" name="test_dict_to_query_multiple_key_values" time="0.002" /><testcase classname="tests.test_utils.test_data" name="test_dict_to_query_list_values" time="0.003" /><testcase classname="tests.test_utils.test_data" name="test_list_like_columns_no_item_type" time="0.003" /><testcase classname="tests.test_utils.test_data" name="test_list_like_columns_with_item_type" time="0.002" /><testcase classname="tests.test_utils.test_data" name="test_list_like_columns_with_item_type_numpy_array" time="0.003" /><testcase classname="tests.test_utils.test_data" name="test_list_like_columns_no_list_like_columns" time="0.007" /><testcase classname="tests.test_utils.test_data" name="test_diff_dfs_same_data" time="0.498" /><testcase classname="tests.test_utils.test_data" name="test_diff_dfs_different_columns" time="0.017" /><testcase classname="tests.test_utils.test_data" name="test_diff_dfs_different_length" time="0.018" /><testcase classname="tests.test_utils.test_data" name="test_diff_dfs_different_values" time="0.033" /><testcase classname="tests.test_utils.test_data" name="test_segment_data_by_selection_dataframe" time="0.013" /><testcase classname="tests.test_utils.test_data" name="test_segment_data_by_selection_series" time="0.002" /><testcase classname="tests.test_utils.test_data" name="test_segment_data_by_selection_missing_start_item" time="0.011" /><testcase classname="tests.test_utils.test_data" name="test_segment_data_by_selection_missing_end_item" time="0.002" /><testcase classname="tests.test_utils.test_data" name="test_segment_data_by_selection_min_overlap" time="0.035" /><testcase classname="tests.test_utils.test_data" name="test_validate_existing_value_in_df_existing_field" time="0.012" /><testcase classname="tests.test_utils.test_data" name="test_validate_existing_value_in_df_non_existing_field" time="0.002" /><testcase classname="tests.test_utils.test_data" name="test_validate_existing_value_in_df_mismatched_value" time="0.014" /><testcase classname="tests.test_utils.test_data" name="test_segment_series_by_list" time="0.013" /><testcase classname="tests.test_utils.test_data" name="test_segment_df_by_list" time="0.004" /><testcase classname="tests.test_utils.test_data" name="test_segment_list_by_list[ref_list0-item_list0-expected_result0]" time="0.013" /><testcase classname="tests.test_utils.test_data" name="test_segment_list_by_list[ref_list1-item_list1-expected_result1]" time="0.001" /><testcase classname="tests.test_utils.test_data" name="test_segment_list_by_list[ref_list2-item_list2-ValueError]" time="0.011" /><testcase classname="tests.test_utils.test_data" name="test_segment_list_by_list[ref_list3-item_list3-expected_result3]" time="0.001" /><testcase classname="tests.test_utils.test_data" name="test_segment_list_by_list[ref_list4-item_list4-expected_result4]" time="0.001" /><testcase classname="tests.test_utils.test_data" name="test_segment_list_by_list[ref_list5-item_list5-expected_result5]" time="0.013" /><testcase classname="tests.test_utils.test_data" name="test_segment_list_by_list[ref_list6-item_list6-ValueError]" time="0.001" /><testcase classname="tests.test_utils.test_data" name="test_update_props_from_one_to_many" time="0.031" /><testcase classname="tests.test_utils.test_models" name="test_submodel_fields_in_model" time="0.001" /><testcase classname="tests.test_utils.test_models" name="test_coerce_extra_fields_to_type_in_df" time="0.010" /><testcase classname="tests.test_utils.test_utils" name="test_get_slug[slug_test0]" time="0.002" /><testcase classname="tests.test_utils.test_utils" name="test_get_slug[slug_test1]" time="0.011" /><testcase classname="tests.test_utils.test_utils" name="test_get_slug[slug_test2]" time="0.001" /><testcase classname="tests.test_utils.test_utils" name="test_get_slug[slug_test3]" time="0.001" /><testcase classname="tests.test_utils.test_utils" name="test_get_unique_shape_id" time="0.002" /><testcase classname="tests.test_utils.test_utils" name="test_point_from_xy" time="0.113" /><testcase classname="tests.test_utils.test_utils" name="test_get_overlapping_range" time="0.003" /><testcase classname="tests.test_utils.test_utils" name="test_all_list_elements_subset_of_single_element" time="0.004" /><testcase classname="tests.test_utils.test_utils" name="test_check_one_or_one_superset_present" time="0.067" /></testsuite></testsuites>